################################################################################
# C STANDARD LIBRARY                                                           #
#                                                                              #
# Note: Suffix function text with "()" to include that entry in the function   #
# index page.                                                                  #
################################################################################

EXIT_SUCCESS:
  text: EXIT_SUCCESS
  def: '#define EXIT_SUCCESS 0'
  desc: Indicates successful execution of a program.
  ref: https://en.cppreference.com/w/c/program/EXIT_status
atoi:
  text: atoi()
  def: int atoi(const char *s);
  desc: Interprets an integer value in a byte string pointed to by `s`.
  ref: https://en.cppreference.com/w/c/string/byte/atoi
exit:
  text: exit()
  def: void exit(int status);
  desc: Causes normal program termination to occur.
  ref: https://en.cppreference.com/w/c/program/exit
fclose:
  text: fclose()
  def: int fclose(FILE *stream);
  desc: Closes the given file `stream`. Returns 0 on success, `EOF` otherwise.
  ref: https://en.cppreference.com/w/c/io/fclose
feof:
  text: feof()
  def: int feof(FILE *stream);
  desc: Checks if the end of the given file stream has been reached.
  ref: https://en.cppreference.com/w/c/io/feof
ferror:
  text: ferror()
  def: int ferror(FILE *stream);
  desc: Checks the given stream for errors.
  ref: https://en.cppreference.com/w/c/io/ferror
fgetc:
  text: fgetc()
  def: int fgetc(FILE *stream);
  desc: Reads the next character from the given input stream.
  ref: https://en.cppreference.com/w/c/io/fgetc
fopen:
  text: fopen()
  def: FILE *fopen(const char *path, const char *mode);
  desc: Opens a file indicated by `path` and returns a pointer to the file stream associated with that file. `mode` is used to determine the file access mode.
  ref: https://en.cppreference.com/w/c/io/fopen
fprintf:
  text: fprintf()
  def: int fprintf(FILE *stream, const char *format, ...);
  desc: Loads the data from the given locations, converts them to character string equivalents and writes the results to the output stream `stream`.
  ref: https://en.cppreference.com/w/c/io/fprintf
fputc:
  text: fputc()
  def: int fputc(int c, FILE *stream);
  desc: Writes a character `c` to the given output stream `stream`.
  ref: https://en.cppreference.com/w/c/io/fputc
fread:
  text: fread()
  def: size_t fread(void *ptr, size_t size, size_t n, FILE *stream);
  desc: Reads up to `n` objects into the array `ptr` from the given input stream `stream` as if by calling {{< lookup/cref fgetc >}} `size` times for each object, and storing the results, in the order obtained, into the successive positions of `ptr`, which is reinterpreted as an array of unsigned char. Returns the number of objects read successfully.
  ref: https://en.cppreference.com/w/c/io/fread
fscanf:
  text: fscanf()
  def: int fscanf(FILE *stream, const char *format, ...);
  desc: Reads the data from file stream `stream`, interprets it according to `format` and stores the results into given locations.
  ref: https://en.cppreference.com/w/c/io/fscanf
fseek:
  text: fseek()
  def: int fseek(FILE *stream, long offset, int whence);
  desc: Sets the file position indicator for the file stream `stream` to the value pointed to by `offset`.
  ref: https://en.cppreference.com/w/c/io/fseek
fwrite:
  text: fwrite()
  def: size_t fwrite(const void *ptr, size_t size, size_t n, FILE *stream);
  desc: Writes `n` of objects from the given array `ptr` to the output stream `stream`. The objects are written as if by reinterpreting each object as an array of unsigned char and calling {{< lookup/cref fputc >}} `size` times for each object to write those unsigned chars into `stream`, in order.
  ref: https://en.cppreference.com/w/c/io/fwrite
malloc:
  text: malloc()
  def: void *malloc(size_t size);
  desc: Allocates `size` bytes of uninitialized storage.
  ref: https://en.cppreference.com/w/c/memory/malloc
memmove:
  text: memmove()
  def: void *memmove(void *dest, const void *src, size_t n);
  desc: Copies `n` characters from the object pointed to by `src` to the object pointed to by `dest`.
  ref: https://en.cppreference.com/w/c/string/byte/memmove
printf:
  text: printf()
  def: int printf(const char *format, ...);
  desc: Loads the data from the given locations, converts them to character string equivalents and writes the results to the output stream `stdout`. Returns the number of characters transmitted to the output stream or negative value if an error occurred.
  ref: https://en.cppreference.com/w/c/io/fprintf
rand:
  text: rand()
  def: int rand(void);
  desc: Returns a pseudorandom integer value between 0 and `RAND_MAX` (0 and `RAND_MAX` included).
  ref: https://en.cppreference.com/w/c/numeric/random/rand
remove:
  text: remove()
  def: int remove(const char *path);
  desc: Deletes the file identified by character string pointed to by `path`.
  ref: https://en.cppreference.com/w/c/io/remove
sprintf:
  text: sprintf()
  def: int sprintf(char *buffer, const char *format, ...);
  desc: Loads the data from the given locations, converts them to character string equivalents and writes the results to a character string `buffer`.
  ref: https://en.cppreference.com/w/c/io/fprintf
strcpy:
  text: strcpy()
  def: char strcpy(char *dest, const char *src);
  desc: Copies the null-terminated byte string pointed to by `src`, including the null terminator, to the character array whose first element is pointed to by `dest`.
  ref: https://en.cppreference.com/w/c/string/byte/strcpy
strlen:
  text: strlen()
  def: size_t strlen(const char *s);
  desc: Returns the length of the given null-terminated byte string, that is, the number of characters in a character array whose first element is pointed to by `s` up to and not including the first null character.
  ref: https://en.cppreference.com/w/c/string/byte/strlen
strncmp:
  text: strncmp()
  def: int strncmp(const char *s1, const char *s2, size_t maxlen);
  desc: Compares at most `maxlen` characters of two possibly null-terminated arrays.
  ref: https://en.cppreference.com/w/c/string/byte/strncmp

################################################################################
# BORLAND STANDARD LIBRARY                                                     #
#                                                                              #
# Note: Suffix function text with "()" to include that entry in the function   #
# index page.                                                                  #
################################################################################

COLORS:
  text: enum COLORS
  borland_c: true
  def: |-
    #define BLINK 128
    enum COLORS {
        BLACK, BLUE, GREEN, CYAN,
        RED, MAGENTA, BROWN, LIGHTGRAY,
        DARKGRAY, LIGHTBLUE, LIGHTGREEN, LIGHTCYAN,
        LIGHTRED, LIGHTMAGENTA, YELLOW, WHITE
    };
  desc: Defines the colors available for console text output.
  ref: /topics/borland-c-nonstandard-library/#COLORS
MK_FP:
  text: MK_FP()
  borland_c: true
  def: |-
    #define MK_FP(seg, ofs) \
        ((void far *) (((unsigned long)(seg) << 16) | (unsigned)(ofs)))
  desc: Makes a far pointer from its component segment (`seg`) and offset (`ofs`) parts.
  ref: /topics/borland-c-nonstandard-library/#MK_FP
REGS:
  text: union REGS
  borland_c: true
  def: |-
    union REGS {
        struct WORDREGS x;
        struct BYTEREGS h;
    };
  desc: Provides an interface to read and write x86 registers through C functions.
  ref: /topics/borland-c-nonstandard-library/#REGS
coreleft:
  text: coreleft()
  borland_c: true
  def: unsigned long coreleft(void);
  desc: Returns a measure of RAM not in use.
  ref: /topics/borland-c-nonstandard-library/#coreleft
disable:
  text: disable()
  borland_c: true
  def: void disable(void);
  desc: Disables hardware interrupts.
  ref: /topics/borland-c-nonstandard-library/#disable
enable:
  text: enable()
  borland_c: true
  def: void enable(void);
  desc: Enables hardware interrupts, allowing any device interrupts to occur.
  ref: /topics/borland-c-nonstandard-library/#enable
farmalloc:
  text: farmalloc()
  borland_c: true
  def: void far *farmalloc(unsigned long nbytes);
  desc: Allocates a block of memory `nbytes` bytes long from the far heap.
  ref: /topics/borland-c-nonstandard-library/#farmalloc
filelength:
  text: filelength()
  borland_c: true
  def: long filelength(int handle);
  desc: Returns the length (in bytes) of the file associated with `handle`.
  ref: /topics/borland-c-nonstandard-library/#filelength
fileno:
  text: fileno()
  borland_c: true
  def: '#define fileno(stream) ((stream)->fd)'
  desc: Returns the file handle for the given stream.
  ref: /topics/borland-c-nonstandard-library/#fileno
getch:
  text: getch()
  borland_c: true
  def: int getch(void);
  desc: Reads a single character directly from the console (keyboard), without echoing to the screen.
  ref: /topics/borland-c-nonstandard-library/#getch
getvect:
  text: getvect()
  borland_c: true
  def: void interrupt (*getvect(int interruptno))();
  desc: Reads the value of the interrupt vector given by `interruptno` and returns that value as a far pointer to an interrupt function.
  ref: /topics/borland-c-nonstandard-library/#getvect
getw:
  text: getw()
  borland_c: true
  def: int getw(FILE *stream);
  desc: Returns the next integer (machine word) in the named input stream. It assumes no special alignment in the file.
  ref: /topics/borland-c-nonstandard-library/#getw
inportb:
  text: inportb()
  borland_c: true
  def: unsigned char inportb(int portid);
  desc: Reads a byte from the hardware I/O port specified by `portid`.
  ref: /topics/borland-c-nonstandard-library/#inportb
int86:
  text: int86()
  borland_c: true
  def: int int86(int intno, union REGS *inregs, union REGS *outregs);
  desc: Executes an 8086 software interrupt specified by the argument `intno`.
  ref: /topics/borland-c-nonstandard-library/#int86
movmem:
  text: movmem()
  borland_c: true
  def: void movmem(void *src, void *dest, unsigned length);
  desc: Copies a block of `length` bytes from `src` to `dest`.
  ref: /topics/borland-c-nonstandard-library/#movmem
outport:
  text: outport()
  borland_c: true
  def: void outport(int portid, int value);
  desc: Writes the word given by `value` to the hardware I/O port specified by `portid`.
  ref: /topics/borland-c-nonstandard-library/#outport
outportb:
  text: outportb()
  borland_c: true
  def: void outportb(int portid, unsigned char value);
  desc: Writes the byte given by `value` to the hardware I/O port specified by `portid`.
  ref: /topics/borland-c-nonstandard-library/#outportb
putw:
  text: putw()
  borland_c: true
  def: int putw(int w, FILE *stream);
  desc: Outputs the integer `w` (machine word) to the given stream.
  ref: /topics/borland-c-nonstandard-library/#putw
random:
  text: random()
  borland_c: true
  def: '#define random(num) (rand() % (num))'
  desc: Returns a random number between 0 and (`num` - 1).
  ref: /topics/borland-c-nonstandard-library/#random
setvect:
  text: setvect()
  borland_c: true
  def: void setvect(int interruptno, void interrupt (*isr)());
  desc: Sets the value of the interrupt vector named by `interruptno` to a new value, `isr`, which is a far pointer containing the address of a new interrupt function.
  ref: /topics/borland-c-nonstandard-library/#setvect
strupr:
  text: strupr()
  borland_c: true
  def: char *strupr(char *s);
  desc: Converts lowercase letters (`a`--`z`) in string `s` to uppercase (`A`--`Z`). No other characters are changed.
  ref: /topics/borland-c-nonstandard-library/#strupr
text_modes:
  text: enum text_modes
  borland_c: true
  def: enum text_modes {LASTMODE=-1, BW40=0, C40, BW80, C80, MONO=7};
  desc: Defines the available screen text modes.
  ref: /topics/borland-c-nonstandard-library/#text_modes
textmode:
  text: textmode()
  borland_c: true
  def: void textmode(int newmode);
  desc: Selects a specific screen text mode.
  ref: /topics/borland-c-nonstandard-library/#textmode
ultoa:
  text: ultoa()
  borland_c: true
  def: char *ultoa(unsigned long value, char *string, int radix);
  desc: Converts `value` to a null-terminated string and stores the result in `string`.
  ref: /topics/borland-c-nonstandard-library/#ultoa

################################################################################
# GAME FUNCTIONS                                                               #
#                                                                              #
# Note: Suffix function text with "()" to include that entry in the function   #
# index page.                                                                  #
################################################################################

#ActArrowPiston:
#ActBabyGhost:
#ActBabyGhostEgg:
ActBarrel:
  text: ActBarrel()
  def: void ActBarrel(word index);
  desc: The tick function for every barrel and basket actor. It takes the `index` of the current actor in the actors array.
  ref: /topics/actors/implementations/barrels-baskets/#ActBarrel
#ActBeamRobot:
#ActBearTrap:
#ActBird:
#ActBombArmed:
#ActBombIdle:
#ActBoss:
#ActCabbage:
#ActClamPlant:
#ActDoor:
#ActDragonfly:
#ActEpisode1End:
#ActExitLineHorizontal:
#ActExitLineVertical:
#ActExitMonsterWest:
#ActExitPlant:
#ActEyePlant:
#ActFallingFloor:
#ActFireball:
#ActFlamePulse:
#ActFlyingWisp:
ActFootSwitch:
  text: ActFootSwitch()
  def: void ActFootSwitch(word index);
  desc: The tick function for every foot switch actor. It takes the `index` of the current actor in the actors array.
  ref: /topics/actors/implementations/foot-switches/#ActFootSwitch
#ActForceField:
#ActFrozenDN:
#ActGhost:
#ActHeadSwitch:
#ActHeartPlant:
#ActHintGlobe:
#ActHorizontalMover:
#ActInvincibilityBubble:
#ActIvyPlant:
#ActJumpPad:
#ActJumpPadRobot:
#ActJumpingBullet:
#ActMonument:
#ActMoon:
#ActMysteryWall:
#ActParachuteBall:
#ActPedestal:
#ActPinkWorm:
#ActPinkWormSlime:
#ActPipeCorner:
#ActPipeEnd:
#ActPrize:
#ActProjectile:
#ActPusherRobot:
#ActPyramid:
#ActReciprocatingSpear:
#ActReciprocatingSpikes:
#ActRedChomper:
#ActRedGreenSlime:
#ActRedJumper:
#ActRoamerSlug:
#ActRocket:
#ActSatellite:
#ActScooter:
#ActScoreEffect:
#ActSentryRobot:
#ActSharpRobot:
#ActSmallFlame:
#ActSmokeEmitter:
#ActSpark:
#ActSpeechBubble:
#ActSpittingTurret:
#ActSpittingWallPlant:
#ActSplittingPlatform:
#ActStoneHeadCrusher:
#ActSuctionWalker:
#ActTransporter:
#ActTulipLauncher:
#ActTwoTonsCrusher:
#ActVerticalMover:
#ActWormCrate:
AdLibService:
  text: AdLibService()
  def: void AdLibService(void);
  desc: Streams chunks of music data to the AdLib hardware at the appropriate time.
  ref: /topics/adlib-functions/#AdLibService
AddScore:
  text: AddScore()
  def: void AddScore(dword points);
  desc: Wraps {{< lookup/cref DrawStatusBarScore >}} with the correct X,Y position for display on the screen. It adds `points` to the player's score and updates the status bar with the new value.
  ref: /topics/status-bar-functions/#AddScore
AddScoreForSprite:
  text: AddScoreForSprite()
  def: void AddScoreForSprite(word sprite_type);
  desc: Determines how many points should be added to the player's score for defeating an actor of a given `sprite_type`, and adds that amount.
  ref: /topics/game-logic-functions/#AddScoreForSprite
AdjustActorMove:
  text: AdjustActorMove()
  def: void AdjustActorMove(word index, word dir);
  desc: Verifies the legality of a map position that the actor (identified by slot `index`) has just moved into and reverts/adjusts their position accordingly. `dir` should be either {{< lookup/cref name="DIR4" text="DIR4_WEST" >}} or {{< lookup/cref name="DIR4" text="DIR4_EAST" >}} to match the direction of movement.
  ref: /topics/actors/movement-functions/#AdjustActorMove
AnimatePalette:
  text: AnimatePalette()
  def: void AnimatePalette(void);
  desc: Cycles through any palette animations that have been requested by the map.
  ref: /topics/c-drawing-functions/#AnimatePalette
CanExplode:
  text: CanExplode()
  def: bool CanExplode(word sprite_type, word frame, word x_origin, word y_origin);
  desc: Returns true if a sprite (consisting of a `sprite_type` and a `frame`) is able to be destroyed by any explosion. If so, destruction shards and effects are inserted at (`x_origin`, `y_origin`) and points are awarded to the score, but the target actor is not destroyed.
  ref: /topics/entities/explosion-functions/#CanExplode
#CanSuctionWalkerFlip:
CheckHighScoreAndShow:
  text: CheckHighScoreAndShow()
  def: void CheckHighScoreAndShow(void);
  desc: Scans the high score table for a position where the current {{< lookup/cref gameScore >}} could be sorted. If a position is located, a prompt is presented asking for a name to be associated with the score at that position, and all inferior scores are shifted one position lower. The tenth score falls off the bottom of the list. Calls {{< lookup/cref ShowHighScoreTable >}} unconditionally before returning.
  ref: /topics/menu-functions/#CheckHighScoreAndShow
ClearGameScreen:
  text: ClearGameScreen()
  def: void ClearGameScreen(void);
  desc: Clears all content from both draw pages of the EGA's memory and redraws a fresh status bar.
  ref: /topics/status-bar-functions/#ClearGameScreen
ClearPlayerDizzy:
  text: ClearPlayerDizzy()
  def: void ClearPlayerDizzy(void);
  desc: Resets all the global variables related to the player's "dizziness" immobilization, immediately returning the player to normal state.
  ref: /topics/game-logic-functions/#ClearPlayerDizzy
ClearPlayerPush:
  text: ClearPlayerPush()
  def: void ClearPlayerPush(void);
  desc: Immediately cancels any push the player may be experiencing, and returns the game state back to regular player control.
  ref: /topics/player-movement-functions/#ClearPlayerPush
ClearScreen:
  text: ClearScreen()
  def: void ClearScreen(void);
  desc: Overwrites the EGA memory for the current draw page with solid black tiles.
  ref: /topics/c-drawing-functions/#ClearScreen
ConstructActor:
  text: ConstructActor()
  def: void ConstructActor(word sprite_type, word x_origin, word y_origin, bool force_active, bool stay_active, bool weighted, bool acrophile, ActorTickFunction tick_func, word data1, word data2, word data3, word data4, word data5);
  desc: Called by {{< lookup/cref NewActorAtIndex >}} as a helper to initialize each member of an {{< lookup/cref Actor >}} structure. The actor slot position is provided in the pass-by-global {{< lookup/cref nextActorIndex >}} variable, and the structure at that position is initialized according to the values passed in the arguments.
  ref: /topics/actors/initialization-functions/#ConstructActor
CopyTilesToEGA:
  text: CopyTilesToEGA()
  def: void CopyTilesToEGA(byte *source, word dest_length, word dest_offset);
  desc: Reads solid tile image data from the memory pointed to by `source`, and installs it into a block of `dest_length` bytes of the EGA's memory starting at `dest_offset`. Because the destination memory is planar, each byte of address space covered by `dest_length` consumes four bytes from `source`.
  ref: /topics/c-drawing-functions/#CopyTilesToEGA
DestroyBarrel:
  text: DestroyBarrel()
  def: void DestroyBarrel(word index);
  desc: Handles the animation, sound effects, and lifecycle management at the instant a barrel or basket is destroyed.
  ref: /topics/actors/implementations/barrels-baskets/#DestroyBarrel
DetectAdLib:
  text: DetectAdLib()
  def: bool DetectAdLib(void);
  desc: Interrogates the default AdLib I/O address to check if one is installed, and initializes the hardware if it is there. Returns true if an AdLib is installed, and false otherwise.
  ref: /topics/adlib-functions/#DetectAdLib
DRAW_SOLID_TILE_XY:
  text: DRAW_SOLID_TILE_XY()
  def: |-
    #define DRAW_SOLID_TILE_XY(src, x, y) { \
        DrawSolidTile((src), (x) + ((y) * 320)); \
    }
  desc: Wraps a call to {{< lookup/cref DrawSolidTile >}}, converting `x` and `y` tile coordinates into the linear offset form expected by that function.
  ref: /topics/assembly-drawing-functions/#DRAW_SOLID_TILE_XY
DrawCartoon:
  text: DrawCartoon()
  def: void DrawCartoon(byte frame, word x_origin, word y_origin);
  desc: Draws a cartoon having the provided `frame` number, with the lower-left tile at coordinates (`x_origin`, `y_origin`).
  ref: /topics/composite-drawing-functions/#DrawCartoon
DrawExplosions:
  text: DrawExplosions()
  def: void DrawExplosions(void);
  desc: Draws the animation sequence for each active explosion, along with the starting/ending decorations and the flashing palette effect if enabled. This function will cause the player to become hurt if they are in close proximity to any active explosions.
  ref: /topics/entities/explosion-functions/#DrawExplosions
DrawFountains:
  text: DrawFountains()
  def: void DrawFountains(void);
  desc: Iterates through every fountain active on the map and draws the sprites that they are built from. If the player is touching any part of the stream beneath the spray at the top of the fountain, damage is inflicted on the player.
  ref: /topics/entities/platform-functions/#DrawFountains
DrawFullscreenImage:
  text: DrawFullscreenImage()
  def: void DrawFullscreenImage(word image_num);
  desc: Loads and displays the full-screen image identified by `image_num`, fading the screen contents between what has already been drawn and the new image. If the requested `image_num` is anything other than {{< lookup/cref name="IMAGE" text="IMAGE_TITLE" >}} or {{< lookup/cref name="IMAGE" text="IMAGE_CREDITS" >}}, any playing music is stopped.
  ref: /topics/c-drawing-functions/#DrawFullscreenImage
DrawFullscreenText:
  text: DrawFullscreenText()
  def: void DrawFullscreenText(char *entry_name);
  desc: Draws a page of B800 text to the screen and clears space for the DOS prompt.
  ref: /topics/c-drawing-functions/#DrawFullscreenText
DrawLights:
  text: DrawLights()
  def: void DrawLights(void);
  desc: Iterates through all the lights present on the current map and draws any that are currently scrolled into view. If {{< lookup/cref areLightsActive >}} is false, this function does nothing.
  ref: /topics/map-drawing-functions/#DrawLights
DrawMainMenu:
  text: DrawMainMenu()
  def: void DrawMainMenu(void);
  desc: A small helper that draws the main menu frame and text, but does not do any input handling. It is only called from {{< lookup/cref TitleLoop >}}.
  ref: /topics/menu-functions/#DrawMainMenu
DrawMapRegion:
  text: DrawMapRegion()
  def: void DrawMapRegion(void);
  desc: Draws one complete frame of the static game world to the current draw page. This includes the solid and masked tiles read from the map data and the scrolling backdrop.
  ref: /topics/map-drawing-functions/#DrawMapRegion
DrawMaskedTile:
  text: DrawMaskedTile()
  def: void DrawMaskedTile(byte *src, word x, word y);
  desc: Copies an 8&times;8 pixel masked tile from the byte pointer `src` minus 16,000 to the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#DrawMaskedTile
DrawNumberFlushRight:
  text: DrawNumberFlushRight()
  def: void DrawNumberFlushRight(word x_origin, word y_origin, dword value);
  desc: Draws a numeric `value` with the rightmost (least significant) digit anchored at screen coordinates (`x_origin`, `y_origin`). `value` is interpreted as an unsigned long integer.
  ref: /topics/user-interface-functions/#DrawNumberFlushRight
DrawPlayer:
  text: DrawPlayer()
  def: void DrawPlayer(byte frame, word x_origin, word y_origin, word mode);
  desc: Draws a player sprite having the provided `frame` number, with the lower-left tile at coordinates (`x_origin`, `y_origin`). `mode` is a {{< lookup/cref DRAW_MODE >}} that influences the drawing behavior.
  ref: /topics/composite-drawing-functions/#DrawPlayer
DrawRandomEffects:
  text: DrawRandomEffects()
  def: void DrawRandomEffects(void);
  desc: Adds random decorative effects to the game world based on what is currently visible on the screen. It randomly applies a sparkling effect to map tiles that have the "slippery" attribute, and adds raindrops (if rain is enabled on the map) in any unoccupied areas at the top edge of the screen.
  ref: /topics/map-drawing-functions/#DrawRandomEffects
DrawSBarHealthHelper:
  text: DrawSBarHealthHelper()
  def: void DrawSBarHealthHelper(void);
  desc: Wraps {{< lookup/cref DrawStatusBarHealth >}} with the correct X,Y position for display on the screen.
  ref: /topics/status-bar-functions/#DrawSBarHealthHelper
DrawScancodeCharacter:
  text: DrawScancodeCharacter()
  def: void DrawScancodeCharacter(word x, word y, byte scancode);
  desc: Draws a single-character representation of `scancode` at screen tile position (`x`, `y`).
  ref: /topics/user-interface-functions/#DrawScancodeCharacter
DrawSolidTile:
  text: DrawSolidTile()
  def: void DrawSolidTile(word src_offset, word dst_offset);
  desc: Copies an 8&times;8 pixel solid tile from the tile storage area byte offset `src_offset` to the video memory byte offset `dst_offset`. Both offsets refer to locations within the EGA's memory space. The EGA hardware must be in "latched write" mode for this function to work correctly.
  ref: /topics/assembly-drawing-functions/#DrawSolidTile
DrawSprite:
  text: DrawSprite()
  def: |-
    void DrawSprite(
        word sprite_type, word frame, word x_origin, word y_origin, word mode
    );
  desc: Draws a sprite of the provided `sprite_type` and `frame`, with the lower-left tile at coordinates (`x_origin`, `y_origin`). The `mode` influences the origin calculations and visual appearance.
  ref: /topics/composite-drawing-functions/#DrawSprite
DrawSpriteTile:
  text: DrawSpriteTile()
  def: void DrawSpriteTile(byte *src, word x, word y);
  desc: Copies an 8&times;8 pixel masked tile from the byte pointer `src` to the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#DrawSpriteTile
DrawSpriteTileFlipped:
  text: DrawSpriteTileFlipped()
  def: void DrawSpriteTileFlipped(byte *src, word x, word y);
  desc: Copies a vertically-flipped 8&times;8 pixel masked tile from the byte pointer `src` to the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#DrawSpriteTileFlipped
DrawSpriteTileTranslucent:
  text: DrawSpriteTileTranslucent()
  def: void DrawSpriteTileTranslucent(byte *src, word x, word y);
  desc: Copies a translucent outline of an 8&times;8 pixel masked tile from the byte pointer `src` to the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#DrawSpriteTileTranslucent
DrawSpriteTileWhite:
  text: DrawSpriteTileWhite()
  def: void DrawSpriteTileWhite(byte *src, word x, word y);
  desc: Copies a solid white outline of an 8&times;8 pixel masked tile from the byte pointer `src` to the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#DrawSpriteTileWhite
DrawStaticGameScreen:
  text: DrawStaticGameScreen()
  def: void DrawStaticGameScreen(void);
  desc: Initializes the static components of the game screen by clearing everything from the current draw page and redrawing the status bar on the freshly-cleared screen. The current score, health, bombs, and stars values are drawn onto the status bar in the process.
  ref: /topics/status-bar-functions/#DrawStaticGameScreen
DrawStatusBarBombs:
  text: DrawStatusBarBombs()
  def: void DrawStatusBarBombs(word x_origin, word y_origin);
  desc: Updates the "bombs" counter in the status bar. Requires `x_origin` and `y_origin` for positioning, which anchors the single digit at an absolute tile position on the screen.
  ref: /topics/status-bar-functions/#DrawStatusBarBombs
DrawStatusBarHealth:
  text: DrawStatusBarHealth()
  def: void DrawStatusBarHealth(word x_origin, word y_origin);
  desc: Updates the health bars in the status bar. Requires `x_origin` and `y_origin` for positioning, which anchors the top of the rightmost bar at an absolute tile position on the screen.
  ref: /topics/status-bar-functions/#DrawStatusBarHealth
DrawStatusBarScore:
  text: DrawStatusBarScore()
  def: void DrawStatusBarScore(dword add_points, word x_origin, word y_origin);
  desc: Increments the player's score by `add_points` then updates the score counter in the status bar. Requires `x_origin` and `y_origin` for positioning, which anchors the rightmost (least significant) digit at an absolute tile position on the screen.
  ref: /topics/status-bar-functions/#DrawStatusBarScore
DrawStatusBarStars:
  text: DrawStatusBarStars()
  def: void DrawStatusBarStars(word x_origin, word y_origin);
  desc: Updates the "stars" counter in the status bar. Requires `x_origin` and `y_origin` for positioning, which anchors the rightmost (least significant) digit at an absolute tile position on the screen.
  ref: /topics/status-bar-functions/#DrawStatusBarStars
DrawTextFrame:
  text: DrawTextFrame()
  def: |-
    word DrawTextFrame(
        word left, word top, int height, int width, char *top_text,
        char *bottom_text, bbool centered
    );
  desc: Draws an empty text frame to the current draw page with the upper-left corner at tile position (`left`, `top`) and a total size of `width`&times;`height` tiles. The top and bottom edges of the frame are prefilled with `top_text` and `bottom_text` respectively, aligned according to the `centered` flag. Returns the X tile coordinate of the inside-left edge of the frame.
  ref: /topics/user-interface-functions/#DrawTextFrame
DrawTextLine:
  text: DrawTextLine()
  def: void DrawTextLine(word x_origin, word y_origin, char *text);
  desc: Draws a single line of `text` with the first character anchored at screen coordinates (`x_origin`, `y_origin`). A limited form of markup is supported to allow insertion of cartoon images, player/actor sprites, and text animation effects.
  ref: /topics/user-interface-functions/#DrawTextLine
EGA_BIT_MASK_DEFAULT:
  text: EGA_BIT_MASK_DEFAULT()
  def: '#define EGA_BIT_MASK_DEFAULT() { outport(0x03ce, (0xff << 8) | 0x08); }'
  desc: Resets the EGA's bit mask to its default state.
  ref: /topics/ega-functions/#EGA_BIT_MASK_DEFAULT
EGA_MODE_DEFAULT:
  text: EGA_MODE_DEFAULT()
  def: '#define EGA_MODE_DEFAULT() { outport(0x03ce, (0x00 << 8) | 0x05); }'
  desc: Resets the EGA's read and write modes to their default state.
  ref: /topics/ega-functions/#EGA_MODE_DEFAULT
EGA_MODE_LATCHED_WRITE:
  text: EGA_MODE_LATCHED_WRITE()
  def: |-
    #define EGA_MODE_LATCHED_WRITE() { \
        outport(0x03c4, (0x0f << 8) | 0x02); \
        outport(0x03ce, (0x01 << 8) | 0x05); \
    }
  desc: Resets the EGA's map mask to its default state and enables latched writes from the CPU.
  ref: /topics/ega-functions/#EGA_MODE_LATCHED_WRITE
EraseWaitSpinner:
  text: EraseWaitSpinner()
  def: void EraseWaitSpinner(word x, word y);
  desc: Erases an area previously occupied by a wait spinner by drawing a tile of solid dark gray at screen tile position (`x`, `y`).
  ref: /topics/user-interface-functions/#EraseWaitSpinner
ExitClean:
  text: ExitClean()
  def: void ExitClean(void);
  desc: Cleans up game state and exits back to DOS.
  ref: /topics/startup-and-exit/#ExitClean
FadeIn:
  text: FadeIn()
  def: void FadeIn(void);
  desc: Calls {{< lookup/cref FadeInCustom >}} with a fixed delay of three game ticks per palette entry.
  ref: /topics/c-drawing-functions/#FadeIn
FadeInCustom:
  text: FadeInCustom()
  def: void FadeInCustom(word delay);
  desc: "\"Fades\" the screen image into view by rebuilding the EGA's default palette, one entry at a time, pausing `delay` game ticks between each entry."
  ref: /topics/c-drawing-functions/#FadeInCustom
FadeOut:
  text: FadeOut()
  def: void FadeOut(void);
  desc: Calls {{< lookup/cref FadeOutCustom >}} with a fixed delay of three game ticks per palette entry.
  ref: /topics/c-drawing-functions/#FadeOut
FadeOutAdLibPlayback:
  text: FadeOutAdLibPlayback()
  def: void FadeOutAdLibPlayback(void);
  desc: Nominally fades any playing music to silence over a period of time, but as implemented it simply cuts the music off immediately.
  ref: /topics/adlib-functions/#FadeOutAdLibPlayback
FadeOutCustom:
  text: FadeOutCustom()
  def: void FadeOutCustom(word delay);
  desc: "\"Fades\" the screen image away by incrementally blanking the EGA's palette to black, one entry at a time, pausing `delay` game ticks between each entry."
  ref: /topics/c-drawing-functions/#FadeOutCustom
FadeWhiteCustom:
  text: FadeWhiteCustom()
  def: void FadeWhiteCustom(word delay);
  desc: "\"Fades\" the screen image away by incrementally blanking the EGA's palette to white, one entry at a time, pausing `delay` game ticks between each entry."
  ref: /topics/c-drawing-functions/#FadeWhiteCustom
GameLoop:
  text: GameLoop()
  def: void GameLoop(byte demo_state);
  desc: Runs once for each frame of gameplay and is responsible for running the appropriate sub-functions for timing, input, player/actor movement, world drawing, and level exit conditions. This function takes a `demo_state` argument which should be one of the {{< lookup/cref DEMO_STATE >}} constants -- this controls the presence of the "DEMO" overlay sprite and is passed through to the input handling functions.
  ref: /topics/game-loop-functions/#GameLoop
GameRand:
  text: GameRand()
  def: word GameRand(void);
  desc: Returns a pseudorandom number based on a fixed table of randomness combined with influence from the player and scrolling game window positions. The output sequence from this function is deterministic for a given sequence of player and scroll positions.
  ref: /topics/game-logic-functions/#GameRand
GetMapTile:
  text: GetMapTile()
  def: word GetMapTile(word x, word y);
  desc: Returns the data for a single map tile positioned at horizontal position `x` and vertical position `y`.
  ref: /topics/level-and-map-functions/#GetMapTile
GetProcessorType:
  text: GetProcessorType()
  def: word GetProcessorType(void);
  desc: Tests the system processor and returns a value indicating its model. Returns {{< lookup/cref CPU_TYPE >}}.
  ref: /topics/processor-detection/#GetProcessorType
GroupEntryFp:
  text: GroupEntryFp()
  def: FILE *GroupEntryFp(char *entry_name);
  desc: Returns a file stream pointer to the data that a group file's `entry_name` refers to.
  ref: /topics/group-file-functions/#GroupEntryFp
GroupEntryLength:
  text: GroupEntryLength()
  def: dword GroupEntryLength(char *entry_name);
  desc: Locates a group file `entry_name` and returns the size of its data in bytes.
  ref: /topics/group-file-functions/#GroupEntryLength
HurtPlayer:
  text: HurtPlayer()
  def: void HurtPlayer(void);
  desc: Deducts a bar of health from the player, and kills them if they have lost enough health.
  ref: /topics/game-logic-functions/#HurtPlayer
InitializeBackdropTable:
  text: InitializeBackdropTable()
  def: void InitializeBackdropTable(void);
  desc: Fills the {{< lookup/cref backdropTable >}} array with four identical copies of backdrop tile offset data.
  ref: /topics/backdrop-initialization-functions/#InitializeBackdropTable
InitializeDecorations:
  text: InitializeDecorations()
  def: void InitializeDecorations(void);
  desc: Clears all of the memory slots used to store decoration state, immediately terminating all incomplete decoration animations and making each slot available for use.
  ref: /topics/entities/decoration-functions/#InitializeDecorations
InitializeEpisode:
  text: InitializeEpisode()
  def: void InitializeEpisode(void);
  desc: Sets up the initial values for a few of the episode-related global variables tracked by the game. This sets up the initial score, health, level number, etc. when a new game is started.
  ref: /topics/game-loop-functions/#InitializeEpisode
InitializeExplosions:
  text: InitializeExplosions()
  def: void InitializeExplosions(void);
  desc: Clears all of the memory slots used to store explosion state, immediately terminating all incomplete explosion animations and making each slot available for use.
  ref: /topics/entities/explosion-functions/#InitializeExplosions
InitializeInterruptRate:
  text: InitializeInterruptRate()
  def: void InitializeInterruptRate(void);
  desc: Sets up the system timer interrupt rate depending on whether or not the AdLib hardware is enabled.
  ref: /topics/adlib-functions/#InitializeInterruptRate
InitializeLevel:
  text: InitializeLevel()
  def: void InitializeLevel(word level_num);
  desc: Initializes all of the global variables and related subsystems for the start (or restart) of the level identified by `level_num`.
  ref: /topics/game-loop-functions/#InitializeLevel
InitializeMapGlobals:
  text: InitializeMapGlobals()
  def: void InitializeMapGlobals();
  desc: Resets many of the global variables pertaining to player movement and map/actor interactivity.
  ref: /topics/game-loop-functions/#InitializeMapGlobals
InitializeShards:
  text: InitializeShards()
  def: void InitializeShards(void);
  desc: Clears all of the memory slots used to store shard state, immediately terminating all incomplete shard animations and making each slot available for use.
  ref: /topics/entities/shard-functions/#InitializeShards
InitializeSpawners:
  text: InitializeSpawners()
  def: void InitializeSpawners(void);
  desc: Clears all of the memory slots used to store spawner state, immediately terminating all incomplete spawner animations and making each slot available for use.
  ref: /topics/entities/spawner-functions/#InitializeSpawners
InnerMain:
  text: InnerMain()
  def: void InnerMain(int argc, char *argv[]);
  desc: Main game function, once CPU testing has passed.
  ref: /topics/main-and-outer-loop/#InnerMain
InteractPlayer:
  text: InteractPlayer()
  def: bool InteractPlayer(word index, word sprite_type, word frame, word x, word y);
  desc: Tests for a potential interaction between an actor located at position `index` in the actors array and the player. The actor's `sprite_type`, `frame`, `x`, and `y` must all be passed, and should agree with the values currently held in the actor's memory structure. Returns true if the actor should not be drawn due to being hidden, destroyed, or picked up.
  ref: /topics/actors/implementations/#InteractPlayer
IsAdLibAbsent:
  text: IsAdLibAbsent()
  def: bbool IsAdLibAbsent(void);
  desc: Returns _true_ if an AdLib or compatible card was _NOT_ detected in the system.
  ref: /topics/adlib-functions/#IsAdLibAbsent
IsAnyKeyDown:
  text: IsAnyKeyDown()
  def: bbool IsAnyKeyDown(void);
  desc: Returns true if any key is currently pressed, without regard to which key it is.
  ref: /topics/keyboard-functions/#IsAnyKeyDown
IsIntersecting:
  text: IsIntersecting()
  def: |-
    bool IsIntersecting(
        word sprite1, word frame1, word x1, word y1,
        word sprite2, word frame2, word x2, word y2
    );
  desc: Returns true if one sprite (consisting of a `sprite` type and a `frame`) located at an `x`/`y` position on the map is intersecting any part of a second sprite passed in the same form.
  ref: /topics/entities/explosion-functions/#IsIntersecting
IsNearExplosion:
  text: IsNearExplosion()
  def: |-
    bool IsNearExplosion(
        word sprite_type, word frame, word x_origin, word y_origin
    );
  desc: Returns true if a sprite (consisting of a `sprite_type` and a `frame`) located at (`x_origin`, `y_origin`) is intersecting any active explosion.
  ref: /topics/entities/explosion-functions/#IsNearExplosion
IsNewBackdrop:
  text: IsNewBackdrop()
  def: bbool IsNewBackdrop(word backdrop_num);
  desc: Tracks the most recently used backdrop number and horizontal/vertical scroll flags. The scroll flags are read from global variables, but the backdrop number being tested must be passed in `backdrop_num`. Returns true if these have changed since the previous call, or false if none of the tracked variables have changed.
  ref: /topics/backdrop-initialization-functions/#IsNewBackdrop
IsSpriteVisible:
  text: IsSpriteVisible()
  def: |-
    bool IsSpriteVisible(
        word sprite_type, word frame, word x_origin, word y_origin
    );
  desc: Returns true if the provided `sprite_type` and `frame` located at `x_origin` and `y_origin` is at least partially visible within the scrolling game window.
  ref: /topics/composite-drawing-functions/#IsSpriteVisible
IsTouchingPlayer:
  text: IsTouchingPlayer()
  def: IsTouchingPlayer(word sprite_type, word frame, word x_origin, word y_origin);
  desc: Returns true if the passed `sprite_type` and `frame` located at `x_origin` and `y_origin` is touching any part of the player sprite at its current position.
  ref: /topics/game-logic-functions/#IsTouchingPlayer
JoinPath:
  text: JoinPath()
  def: char *JoinPath(char *dir, char *file);
  desc: Combines a string `dir` with a string `file`, creating and returning an absolute pathname.
  ref: /topics/configuration-file-functions/#JoinPath
KeyboardInterruptService:
  text: KeyboardInterruptService()
  def: void interrupt KeyboardInterruptService(void);
  desc: Maintains the state of the keyboard variables. Called in response to the keyboard interrupt event.
  ref: /topics/keyboard-functions/#KeyboardInterruptService
LightenScreenTile:
  text: LightenScreenTile()
  def: void LightenScreenTile(word x, word y);
  desc: Lightens the entire area at the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#LightenScreenTile
LightenScreenTileEast:
  text: LightenScreenTileEast()
  def: void LightenScreenTileEast(word x, word y);
  desc: Lightens the lower-left half of an 8&times;8 tile at the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#LightenScreenTileEast
LightenScreenTileWest:
  text: LightenScreenTileWest()
  def: void LightenScreenTileWest(word x, word y);
  desc: Lightens the lower-right half of an 8&times;8 tile at the video memory tile location identified by column `x` and row `y`.
  ref: /topics/assembly-drawing-functions/#LightenScreenTileWest
LoadActorTileData:
  text: LoadActorTileData()
  def: void LoadActorTileData(char *entry_name);
  desc: Loads actor tile data into system memory.
  ref: /topics/group-file-functions/#LoadActorTileData
LoadBackdropData:
  text: LoadBackdropData()
  def: void LoadBackdropData(char *entry_name, byte *scratch);
  desc: Reads backdrop data from the passed group file `entry_name` and installs it into the appropriate location in the EGA memory. If horizontal and/or vertical scrolling is enabled in the map variables, additional copies are loaded into the EGA memory to facilitate sub-tile parallax scrolling. A `scratch` buffer is required, which must be large enough to hold two complete copies of backdrop data plus an additional 640 bytes.
  ref: /topics/backdrop-initialization-functions/#LoadBackdropData
LoadCartoonData:
  text: LoadCartoonData()
  def: void LoadCartoonData(char *entry_name);
  desc: Loads the cartoon masked tile image data from the group file `entry_name`.
  ref: /topics/group-file-functions/#LoadCartoonData
LoadConfigurationData:
  text: LoadConfigurationData()
  def: void LoadConfigurationData(char *filename);
  desc: Loads and parses the contents of the configuration file named `filename` into several global variables.
  ref: /topics/configuration-file-functions/#LoadConfigurationData
LoadDemoData:
  text: LoadDemoData()
  def: void LoadDemoData(void);
  desc: Copies the data from the PREVDEMO.MNI group file entry into system memory.
  ref: /topics/demo-functions/#LoadDemoData
LoadFontTileData:
  text: LoadFontTileData()
  def: void LoadFontTileData(char *entry_name, byte *dest, word length);
  desc: Loads font data into system memory.
  ref: /topics/group-file-functions/#LoadFontTileData
LoadGameState:
  text: LoadGameState()
  def: bbool LoadGameState(char slot_char);
  desc: Reads the current state of the most important player variables from a file on disk, whose filename extension is influenced by the character provided in `slot_char`. If the file cannot be loaded, returns false. If the file's internal anti-tampering checksum does not match, an error message is displayed and the program exits. Otherwise, returns true.
  ref: /topics/save-file-functions/#LoadGameState
LoadGroupEntryData:
  text: LoadGroupEntryData()
  def: void LoadGroupEntryData(char *entry_name, byte *dest, word length);
  desc: Reads data from an `entry_name` inside a group file and stores it in the memory block pointed to by `dest`. `length` controls how much data is copied.
  ref: /topics/group-file-functions/#LoadGroupEntryData
LoadInfoData:
  text: LoadInfoData()
  def: void LoadInfoData(char *entry_name, word *dest, word length);
  desc: Reads a group file `entry_name` containing "info" data into the memory block pointed to by `dest`.
  ref: /topics/group-file-functions/#LoadInfoData
LoadMapData:
  text: LoadMapData()
  def: void LoadMapData(word level_num);
  desc: Reads the map file associated with the passed `level_num` and initializes the global variables that are most affected by a map file's contents.
  ref: /topics/level-and-map-functions/#LoadMapData
LoadMaskedTileData:
  text: LoadMaskedTileData()
  def: void LoadMaskedTileData(char *entry_name);
  desc: Loads data from the group file entry named `entry_name` and stores it in the masked tile data block.
  ref: /topics/group-file-functions/#LoadMaskedTileData
LoadMusicData:
  text: LoadMusicData()
  def: Music *LoadMusicData(word music_num, Music *dest);
  desc: Opens music data from a group file entry (whose name is indexed by a numerical `music_num`), loads the data into the {{< lookup/cref Music >}} structure pointed to by `dest`, and prepares the AdLib service to receive new music data. Returns a pointer to `dest`.
  ref: /topics/group-file-functions/#LoadMusicData
LoadSoundData:
  text: LoadSoundData()
  def: void LoadSoundData(char *entry_name, word *dest, int skip);
  desc: Reads data from the group file entry named by `entry_name` and stores it in the `dest` memory block along with index structures.
  ref: /topics/group-file-functions/#LoadSoundData
LoadTileAttributeData:
  text: LoadTileAttributeData()
  def: void LoadTileAttributeData(char *entry_name);
  desc: Loads data from the group file entry named `entry_name` and stores it in the tile attribute data block.
  ref: /topics/group-file-functions/#LoadTileAttributeData
MAP_CELL_ADDR:
  text: MAP_CELL_ADDR()
  def: '#define MAP_CELL_ADDR(x, y) (mapData.w + ((y) << mapYPower) + x)'
  desc: Converts an `x` and `y` position, measured in zero-based tiles, into a pointer to the map data in memory.
  ref: /topics/level-and-map-functions/#MAP_CELL_ADDR
MAP_CELL_DATA:
  text: MAP_CELL_DATA()
  def: '#define MAP_CELL_DATA(x, y) (*(mapData.w + (x) + ((y) << mapYPower)))'
  desc: Looks up the value of a tile at an `x` and `y` position, measured in zero-based tiles, from the map data in memory.
  ref: /topics/level-and-map-functions/#MAP_CELL_DATA
MAP_CELL_DATA_SHIFTED:
  text: MAP_CELL_DATA_SHIFTED()
  def: |-
    #define MAP_CELL_DATA_SHIFTED(x, y, shift_expr) \
        (*(mapData.w + (x) + ((y) << mapYPower) + shift_expr))
  desc: Looks up the value of a tile at an `x` and `y` position plus an arbitrary shift expression `shift_expr`, all measured in zero-based tiles, from the map data in memory.
  ref: /topics/level-and-map-functions/#MAP_CELL_DATA_SHIFTED
MoveAndDrawActors:
  text: MoveAndDrawActors()
  def: void MoveAndDrawActors(void);
  desc: Iterates over each actor currently active in the game and calls the per-actor processing function.
  ref: /topics/actors/movement-functions/#MoveAndDrawActors
MoveAndDrawDecorations:
  text: MoveAndDrawDecorations()
  def: void MoveAndDrawDecorations(void);
  desc: Draws, advances the animation step, and moves each decoration currently running, and handles looping and ending conditions.
  ref: /topics/entities/decoration-functions/#MoveAndDrawDecorations
MoveAndDrawShards:
  text: MoveAndDrawShards()
  def: void MoveAndDrawShards(void);
  desc: Moves and draws the sprites for all shards that are currently active. When a shard animation ends its slot is marked inactive.
  ref: /topics/entities/shard-functions/#MoveAndDrawShards
MoveAndDrawSpawners:
  text: MoveAndDrawSpawners()
  def: void MoveAndDrawSpawners(void);
  desc: Moves and draws the sprites for all spawners that are currently active. When a spawner animation ends (either due to finishing the animation or hitting a solid map tile) its slot is marked inactive and a new actor is created in the spawner's final position.
  ref: /topics/entities/spawner-functions/#MoveAndDrawSpawners
MoveFountains:
  text: MoveFountains()
  def: void MoveFountains(void);
  desc: Iterates through each fountain defined on the current map and adjusts their position by one tile.
  ref: /topics/entities/platform-functions/#MoveFountains
MovePlatforms:
  text: MovePlatforms()
  def: void MovePlatforms(void);
  desc: Iterates through each platform defined on the current map and adjusts their position by one tile.
  ref: /topics/entities/platform-functions/#MovePlatforms
#MovePlayer:
MovePlayerPlatform:
  text: MovePlayerPlatform()
  def: void MovePlayerPlatform(word x_west, word x_east, word x_dir, word y_dir);
  desc: Determines if a platform covering X positions `x_west` to `x_east` is interacting with the player, and if so, modifies the player's position to keep them attached to the platform as it moves. The current movement direction of the platform is passed in horizontal/vertical arguments `x_dir` and `y_dir`.
  ref: /topics/entities/platform-functions/#MovePlayerPlatform
MovePlayerPush:
  text: MovePlayerPush()
  def: void MovePlayerPush(void);
  desc: Handles one game tick of player push movement.
  ref: /topics/player-movement-functions/#MovePlayerPush
#MovePlayerScooter:
NewActor:
  text: NewActor()
  def: void NewActor(word actor_type, word x_origin, word y_origin);
  desc: Dynamically inserts a new actor having the specified `actor_type` into the game world at the location specified by `x_origin` and `y_origin`.
  ref: /topics/actors/initialization-functions/#NewActor
NewActorAtIndex:
  text: NewActorAtIndex()
  def: bbool NewActorAtIndex(word index, word actor_type, word x, word y);
  desc: Inserts an actor of the specified `actor_type` into the {{< lookup/cref actors >}} array at the specified `index` position. The initial origin position is provided in `x` and `y`, and X/Y shifts are applied here. Returns true as long as `actor_type` referred to a defined actor type.
  ref: /topics/actors/initialization-functions/#NewActorAtIndex
NewDecoration:
  text: NewDecoration()
  def: |-
    void NewDecoration(
        word sprite_type, word num_frames, word x_origin, word y_origin,
        word dir, word num_times
    );
  desc: Creates a new decoration at `x_origin` and `y_origin` consisting of the passed `sprite_type` with an animation duration of `num_frames`. `dir` controls the straight-line direction the decoration will move in, and `num_times` controls how many times the animation sequence will play before ending.
  ref: /topics/entities/decoration-functions/#NewDecoration
NewExplosion:
  text: NewExplosion()
  def: void NewExplosion(word x_origin, word y_origin);
  desc: Creates a new instance of an explosion at the passed `x_origin` and `y_origin` map tile coordinates, sets the animation up to run, and plays the explosion sound. The actual location of the explosion sprite will be two tiles lower on the screen than `y_origin` requests.
  ref: /topics/entities/explosion-functions/#NewExplosion
NewMapActorAtIndex:
  text: NewMapActorAtIndex()
  def: void NewMapActorAtIndex(word index, word map_actor_type, word x_origin, word y_origin);
  desc: Creates actors and special actors based on the passed `map_actor_type`. For regular actors, `index` controls the position in the actors array where the new actor will be created; for special actors it does nothing. For both actor kinds, `x_origin` and `y_origin` control the actor's initial position within the map.
  ref: /topics/actors/initialization-functions/#NewMapActorAtIndex
NewPounceDecoration:
  text: NewPounceDecoration()
  def: void NewPounceDecoration(word x, word y);
  desc: Inserts six decorations representing pieces of pounce debris into the game world, radiating away from the origin point specified in `x` and `y`.
  ref: /topics/entities/decoration-functions/#NewPounceDecoration
NewShard:
  text: NewShard()
  def: void NewShard(word sprite_type, word frame, word x_origin, word y_origin);
  desc: Creates a new shard at `x_origin` and `y_origin` consisting of the passed `sprite_type` and `frame`.
  ref: /topics/entities/shard-functions/#NewShard
NewSpawner:
  text: NewSpawner()
  def: void NewSpawner(word actor_type, word x_origin, word y_origin);
  desc: Creates a new instance of a spawner at the passed `x_origin` and `y_origin` map tile coordinates and sets the animation up to run. `actor_type` controls both the type of actor that will be created when the spawner completes, and the sprite type that will be drawn while the spawner is running.
  ref: /topics/entities/spawner-functions/#NewSpawner
NextLevel:
  text: NextLevel()
  def: void NextLevel(void);
  desc: Selects the next level to be played in the progression. Depending on the number of stars collected, it conditionally takes the player to or from one of the bonus levels at regular intervals. If a demo is being recorded or played back, a fixed (and discontinuous) progression of levels is selected instead.
  ref: /topics/level-and-map-functions/#NextLevel
PCSpeakerService:
  text: PCSpeakerService()
  def: void PCSpeakerService(void);
  desc: Sends a new fragment of sound effect data to the PC speaker.
  ref: /topics/pc-speaker-and-timing-functions/#PCSpeakerService
ProcessActor:
  text: ProcessActor()
  def: void ProcessActor(word index);
  desc: Handles the overall per-tick movement for one actor, identified by its `index` position in the actors array. If the actor is marked as dead, this function is a no-op.
  ref: /topics/actors/movement-functions/#ProcessActor
ProcessGameInput:
  text: ProcessGameInput()
  def: byte ProcessGameInput(byte demo_state);
  desc: Handles all keyboard and joystick input while the game is being played. Depending on the value passed in `demo_state` (which should be one of the {{< lookup/cref DEMO_STATE >}} values), this behavior is modified to record or play back demo data. Returns one of the {{< lookup/cref GAME_INPUT >}} values to control the game loop's flow.
  ref: /topics/game-loop-functions/#ProcessGameInput
ProcessGameInputHelper:
  text: ProcessGameInputHelper()
  def: byte ProcessGameInputHelper(word active_page, byte demo_state);
  desc: Prepares the video hardware for the possibility of showing a menu or dialog during the game loop. `active_page` should contain the "active" (i.e. currently displayed) video page number, and `demo_state` should hold one of the {{< lookup/cref DEMO_STATE >}} values.
  ref: /topics/game-loop-functions/#ProcessGameInputHelper
ProcessAndDrawPlayer:
  text: ProcessAndDrawPlayer()
  def: bbool ProcessAndDrawPlayer(void);
  desc: Determines the player's reaction to pain or death and draws the player sprite accordingly. If the player has died and completed the relevant death animation sequence, this function reloads the game state to the way it was when the level was last started and returns true. If the level has not been restarted, this function returns false.
  ref: /topics/game-logic-functions/#ProcessAndDrawPlayer
ProcessPlayerDizzy:
  text: ProcessPlayerDizzy()
  def: void ProcessPlayerDizzy(void);
  desc: Determines when a queued bout of dizziness should become effective, and handles the cases where dizziness wears off naturally or is abruptly canceled.
  ref: /topics/game-logic-functions/#ProcessPlayerDizzy
ProfileCPU:
  text: ProfileCPU()
  def: void ProfileCPU(void);
  desc: Measures the execution speed of the CPU relative to the system's Programmable Interval Timer, and records the number of busy loop iterations the CPU requires to generate various delay times.
  ref: /topics/adlib-functions/#ProfileCPU
ProfileCPUService:
  text: ProfileCPUService()
  def: void interrupt ProfileCPUService(void);
  desc: Benchmarks the timing characteristics of the CPU relative to the system's Programmable Interval Timer.
  ref: /topics/adlib-functions/#ProfileCPUService
PromptKeyBind:
  text: PromptKeyBind()
  def: bbool PromptKeyBind(byte *target_var, word x, char *message);
  desc: Displays `message` text at the provided `x` position (and a fixed Y position) on the screen and reads a single scancode into the memory pointed to by `target_var`. Returns true if the user pressed the <kbd>Esc</kbd> key and false for all other keys.
  ref: /topics/menu-functions/#PromptKeyBind
PromptLevelWarp:
  text: PromptLevelWarp()
  def: bbool PromptLevelWarp(void);
  desc: Prompts the user to select a map number from 1 to 12 (or 13, depending on the episode) and jumps to the start of the chosen map. Returns true if the map changed, or false if the user entered a non-numeric or out-of-range value.
  ref: /topics/menu-functions/#PromptLevelWarp
PromptQuitConfirm:
  text: PromptQuitConfirm()
  def: bbool PromptQuitConfirm(void);
  desc: Displays a window prompting the user to confirm their intention to quit, and blocks until a key is pressed. The return value is true if the <kbd>Y</kbd> key was pressed, or false in the case of any other key.
  ref: /topics/menu-functions/#PromptQuitConfirm
PromptRestoreGame:
  text: PromptRestoreGame()
  def: byte PromptRestoreGame(void);
  desc: Displays a menu that prompts the user to pick a save game slot (1-9) to load from, and gameplay jumps to that state. The user may cancel this prompt without loading by pressing <kbd>Esc</kbd>, <kbd>Space</kbd>, or <kbd>Enter</kbd>. The return value is one of the {{< lookup/cref RESTORE_GAME >}} constants.
  ref: /topics/menu-functions/#PromptRestoreGame
PromptSaveGame:
  text: PromptSaveGame()
  def: void PromptSaveGame(void);
  desc: Displays a menu that prompts the user to pick a save game slot (1-9) to save the state of their game into, then the save is carried out. The user may cancel this prompt without saving by pressing <kbd>Esc</kbd>, <kbd>Space</kbd>, or <kbd>Enter</kbd>.
  ref: /topics/menu-functions/#PromptSaveGame
ReadAndEchoText:
  text: ReadAndEchoText()
  def: |-
    void ReadAndEchoText(
        word x_origin, word y_origin, char *dest, word max_length
    );
  desc: Presents a wait spinner near (`x_origin`, `y_origin`) that accepts at most `max_length` characters of keyboard input. The typed characters are echoed to the screen and stored in the memory pointed to by `dest`, which should be large enough to hold `max_length` + 1 bytes of data.
  ref: /topics/user-interface-functions/#ReadAndEchoText
ReadJoystickTimes:
  text: ReadJoystickTimes()
  def: void ReadJoystickTimes(word stick_num, int *x_time, int *y_time);
  desc: Triggers a timing interval on the joystick hardware and returns the raw interval lengths for the one joystick, identified by `stick_num`, in `x_time` and `y_time`.
  ref: /topics/joystick-functions/#ReadJoystickTimes
ReadDemoFrame:
  text: ReadDemoFrame()
  def: bbool ReadDemoFrame(void);
  desc: Reads the next byte from the demo data and updates the global input command state. Returns true on end of data.
  ref: /topics/demo-functions/#ReadDemoFrame
ReadJoystickState:
  text: ReadJoystickState()
  def: JoystickState ReadJoystickState(word stick_num);
  desc: Polls the joystick identified by `stick_num` for its current position and button state, and updates the player control variables accordingly.
  ref: /topics/demo-functions/#ReadJoystickState
SET_PLAYER_DIZZY:
  text: SET_PLAYER_DIZZY()
  def: '#define SET_PLAYER_DIZZY() { queuePlayerDizzy = true; }'
  desc: Puts the player into a "dizzy" state, which will begin to take effect the next time they are standing on solid ground.
  ref: /topics/game-logic-functions/#SET_PLAYER_DIZZY
SaveConfigurationData:
  text: SaveConfigurationData()
  def: void SaveConfigurationData(char *filename);
  desc: Saves the state of the global game configuration variables to the configuration file named `filename`.
  ref: /topics/configuration-file-functions/#SaveConfigurationData
SaveDemoData:
  text: SaveDemoData()
  def: void SaveDemoData(void);
  desc: Flushes all of the in-memory demo data to the PREVDEMO.MNI file on disk -- it does not modify any group file contents.
  ref: /topics/demo-functions/#SaveDemoData
SaveGameState:
  text: SaveGameState()
  def: void SaveGameState(char slot_char);
  desc: Writes the current state of the most important player variables to a file on disk, whose filename extension is influenced by the character provided in `slot_char`.
  ref: /topics/save-file-functions/#SaveGameState
SelectActivePage:
  text: SelectActivePage()
  def: void SelectActivePage(word page_num);
  desc: Switches the actively-displayed video memory page to `page_num`, causing its contents to appear on the screen, using a BIOS interrupt call.
  ref: /topics/ega-functions/#SelectActivePage
SelectDrawPage:
  text: SelectDrawPage()
  def: void SelectDrawPage(word page_num);
  desc: Changes the draw page to `page_num` and updates the memory address that subsequent drawing procedures should operate on.
  ref: /topics/ega-functions/#SelectDrawPage
SetPIT0Value:
  text: SetPIT0Value()
  def: void SetPIT0Value(word value);
  desc: Configures channel 0 of the system's Programmable Interval Timer with the provided counter `value`.
  ref: /topics/adlib-functions/#SetPIT0Value
SetAdLibRegister:
  text: SetAdLibRegister()
  def: void SetAdLibRegister(byte addr, byte data);
  desc: Writes one `data` byte to the AdLib register at address `addr`, assuming the hardware is present at the standard I/O ports.
  ref: /topics/adlib-functions/#SetAdLibRegister
SetBorderColorRegister:
  text: SetBorderColorRegister()
  def: void SetBorderColorRegister(word color_value);
  desc: Configures the display adapter to use `color_value` to fill the overscan area at the edges of the screen, using a BIOS interrupt call.
  ref: /topics/ega-functions/#SetBorderColorRegister
SetInterruptRate:
  text: SetInterruptRate()
  def: void SetInterruptRate(word ints_second);
  desc: Configures channel 0 of the system's Programmable Interval Timer with an interrupts-per-second value specified by `ints_second`.
  ref: /topics/adlib-functions/#SetInterruptRate
SetMapTile:
  text: SetMapTile()
  def: void SetMapTile(word value, word x, word y);
  desc: Sets one map tile at horizontal position `x` and vertical position `y` to the value passed in `value`.
  ref: /topics/level-and-map-functions/#SetMapTile
SetMapTile4:
  text: SetMapTile4()
  def: |-
    void SetMapTile4(
        word val1, word val2, word val3, word val4, word x_origin, word y_origin
    );
  desc: Sets a horizontal span of four map tiles, starting at horizontal position `x_origin` and vertical position `y_origin`, to the values passed in `val1` through `val4`.
  ref: /topics/level-and-map-functions/#SetMapTile4
SetMapTileRepeat:
  text: SetMapTileRepeat()
  def: void SetMapTileRepeat(word value, word count, word x_origin, word y_origin);
  desc: Sets a horizontal span of `count` map tiles, starting at horizontal position `x_origin` and vertical position `y_origin`, to the value passed in `value`.
  ref: /topics/level-and-map-functions/#SetMapTileRepeat
SetMusicState:
  text: SetMusicState()
  def: bool SetMusicState(bool state);
  desc: Enables or disables AdLib output based on the value of `state`.
  ref: /topics/adlib-functions/#SetMusicState
SetPaletteRegister:
  text: SetPaletteRegister()
  def: void SetPaletteRegister(word palette_index, word color_value);
  desc: Configures the display adapter to use `color_value` as the screen display color at positions where the video memory contains `palette_index`, using a BIOS interrupt call.
  ref: /topics/ega-functions/#SetPaletteRegister
SetPlayerPush:
  text: SetPlayerPush()
  def: |-
    void SetPlayerPush(
        word dir, word max_time, word speed, word force_frame, bool abortable,
        bool blockable
    );
  desc: Configures the global game state to cause the player to be pushed in a direction `dir` at `speed` tiles per game tick for a total duration of `max_time` game ticks. During this time, the player sprite will be drawn using `force_frame` as the frame number. If the `abortable` flag is set, the player can cancel the effect of the push by jumping. If the `blockable` flag is set, the push will consider and stop at any solid map tiles encountered along the way.
  ref: /topics/player-movement-functions/#SetPlayerPush
SetVideoMode:
  text: SetVideoMode()
  def: void SetVideoMode(word mode_num);
  desc: Changes the system's video mode to the mode number specified by `mode_num`, using a BIOS interrupt call.
  ref: /topics/ega-functions/#SetVideoMode
ShowAlteredFileError:
  text: ShowAlteredFileError()
  def: void ShowAlteredFileError(void);
  desc: Shows when the user tries to load a manipulated save file whose checksum does not match the expected value.
  ref: /topics/dialog-functions/#ShowAlteredFileError
ShowBombHint:
  text: ShowBombHint()
  def: void ShowBombHint(void);
  desc: Displays a hint dialog that informs the player that they can't use the bomb key until they have picked up a bomb.
  ref: /topics/dialog-functions/#ShowBombHint
ShowCheatMessage:
  text: ShowCheatMessage()
  def: void ShowCheatMessage(void);
  desc: Displays a static dialog informing the user that they have entered the cheat code successfully and explaining the effect.
  ref: /topics/dialog-functions/#ShowCheatMessage
ShowCongratulations:
  text: ShowCongratulations()
  def: void ShowCongratulations(void);
  desc: Shows a brief page of post-ending story and a pitch for another upcoming game.
  ref: /topics/dialog-functions/#ShowCongratulations
ShowCopyright:
  text: ShowCopyright()
  def: void ShowCopyright(void);
  desc: Shows an abbreviated list of credits, the copyright year, and the game version.
  ref: /topics/dialog-functions/#ShowCopyright
ShowE1CliffhangerMessage:
  text: ShowE1CliffhangerMessage()
  def: void ShowE1CliffhangerMessage(word actor_type);
  desc: Presents a sequence of two dialogs introducing the "cliffhanger" ending sequence of episode one, followed by ending the game by setting {{< lookup/cref winGame >}} to true. During each call, the passed `actor_type` value is used to determine which text to show, or if the game should end.
  ref: /topics/dialog-functions/#ShowE1CliffhangerMessage
ShowEnding:
  text: ShowEnding()
  def: void ShowEnding(void);
  desc: Presents a sequence of dialogs when an episode of the game has been played to completion.
  ref: /topics/dialog-functions/#ShowEnding
ShowForeignOrders:
  text: ShowForeignOrders()
  def: void ShowForeignOrders(void);
  desc: Displays five consecutive pages of ordering information for international customers.
  ref: /topics/dialog-functions/#ShowForeignOrders
ShowGameRedefineMenu:
  text: ShowGameRedefineMenu()
  def: void ShowGameRedefineMenu(void);
  desc: Shows a menu labeled "Game Redefine" in response to the user selecting the <kbd>G</kbd> option in either the main menu or the in-game help menu. This function simply dispatches one of the submenu functions in response to the user's input.
  ref: /topics/menu-functions/#ShowGameRedefineMenu
ShowHealthHint:
  text: ShowHealthHint()
  def: void ShowHealthHint(void);
  desc: Displays a hint dialog that teaches the player what {{< lookup/actor type=28 strip=true plural=true >}} are and how they affect gameplay.
  ref: /topics/dialog-functions/#ShowHealthHint
ShowHelpMenu:
  text: ShowHelpMenu()
  def: byte ShowHelpMenu(void);
  desc: Shows a menu labeled "Help Menu" in response to the user pressing <kbd>F1</kbd> during the game. It gives access to save/restore functions and a subset of options offered by the main menu. Returns one of the {{< lookup/cref HELP_MENU >}} variables.
  ref: /topics/menu-functions/#ShowHelpMenu
ShowHighScoreTable:
  text: ShowHighScoreTable()
  def: void ShowHighScoreTable(void);
  desc: Shows the top ten scores that have been reached and the name of the player who earned each spot. The table can optionally be erased by pressing the <kbd>F10</kbd> key and confirming with the <kbd>Y</kbd> key.
  ref: /topics/menu-functions/#ShowHighScoreTable
ShowHintGlobeMessage:
  text: ShowHintGlobeMessage()
  def: void ShowHintGlobeMessage(word hint_num);
  desc: Displays a dialog containing an animated context-appropriate hint message. The message is selected via the numeric `hint_num` argument.
  ref: /topics/dialog-functions/#ShowHintGlobeMessage
ShowHintsAndKeys:
  text: ShowHintsAndKeys()
  def: void ShowHintsAndKeys(word top);
  desc: Displays a page of helpful hints, followed by two pages of keyboard help. The `top` parameter influences the vertical position of the frames, to allow the dialogs to be placed higher on the screen while the game is being played.
  ref: /topics/dialog-functions/#ShowHintsAndKeys
ShowInstructions:
  text: ShowInstructions()
  def: void ShowInstructions(void);
  desc: Shows a progression of five pages of dialog frames that teach the user how to play the game.
  ref: /topics/dialog-functions/#ShowInstructions
ShowJoystickConfiguration:
  text: ShowJoystickConfiguration()
  def: void ShowJoystickConfiguration(word stick_num);
  desc: Prompts the user to calibrate the joystick timings and button configuration for the joystick identified by `stick_num`.
  ref: /topics/joystick-functions/#ShowJoystickConfiguration
ShowKeyboardConfiguration:
  text: ShowKeyboardConfiguration()
  def: void ShowKeyboardConfiguration(void);
  desc: Shows and handles the keyboard configuration (sometimes called keyboard redefine) menu.
  ref: /topics/menu-functions/#ShowKeyboardConfiguration
ShowLevelIntro:
  text: ShowLevelIntro()
  def: void ShowLevelIntro(word level_num);
  desc: Presents the animated message "Now entering level..." followed by the map number of the passed `level_num`.
  ref: /topics/dialog-functions/#ShowLevelIntro
ShowMemoryUsage:
  text: ShowMemoryUsage()
  def: void ShowMemoryUsage(void);
  desc: Displays a debug dialog with a few live statistics about available system memory and the current number of actors.
  ref: /topics/dialog-functions/#ShowMemoryUsage
ShowOrderingInformation:
  text: ShowOrderingInformation()
  def: void ShowOrderingInformation(void);
  desc: Displays five sequential pages of ordering information in the shareware episode of the game, or a single page thanking the user for purchasing one of the registered episodes in other cases.
  ref: /topics/dialog-functions/#ShowOrderingInformation
ShowPauseMessage:
  text: ShowPauseMessage()
  def: void ShowPauseMessage(void);
  desc: Presents a "game paused" dialog, stops music playback, and stops all execution until a key is pressed. Once that happens, the music is restarted and the function returns to its caller.
  ref: /topics/dialog-functions/#ShowPauseMessage
ShowPounceHint:
  text: ShowPounceHint()
  def: void ShowPounceHint(void);
  desc: Displays a sequence of two hint dialogs that teach the player how to pounce on enemies for defense.
  ref: /topics/dialog-functions/#ShowPounceHint
ShowPublisherBBS:
  text: ShowPublisherBBS()
  def: void ShowPublisherBBS(void);
  desc: Displays two consecutive pages of information on how to access Apogee's official channels on popular bulletin board systems (BBSes) of the day.
  ref: /topics/dialog-functions/#ShowPublisherBBS
ShowRescuedDNMessage:
  text: ShowRescuedDNMessage()
  def: void ShowRescuedDNMessage(void);
  desc: Displays a dialog sequence between the player and Duke Nukem (here using the short-lived but canonical spelling "Nukum").
  ref: /topics/dialog-functions/#ShowRescuedDNMessage
ShowRestoreGameError:
  text: ShowRestoreGameError()
  def: void ShowRestoreGameError(void);
  desc: Shows when the user tries to restore a saved game whose file does not exist.
  ref: /topics/dialog-functions/#ShowRestoreGameError
ShowSectionIntermission:
  text: ShowSectionIntermission()
  def: void ShowSectionIntermission(char *top_text, char *bottom_text);
  desc: Ties different "sections" of the level progression together by showing a completion dialog and presenting the star bonus. Sections are two levels long, followed by a conditional bonus level. Depending on the context (section complete, or bonus level complete) different values may be passed in `top_text` and `bottom_text`.
  ref: /topics/dialog-functions/#ShowSectionIntermission
ShowSoundTest:
  text: ShowSoundTest()
  def: void ShowSoundTest(void);
  desc: Presents a menu that allows the user to seek through and preview each sound effect available in the game.
  ref: /topics/menu-functions/#ShowSoundTest
ShowStarBonus:
  text: ShowStarBonus()
  def: void ShowStarBonus(void);
  desc: Presents a dialog that tallies up the number of stars collected by the player during the previous section. As a side effect, this function zeroes {{< lookup/cref gameStars >}} and increases {{< lookup/cref gameScore >}} accordingly.
  ref: /topics/dialog-functions/#ShowStarBonus
ShowStory:
  text: ShowStory()
  def: void ShowStory(void);
  desc: Shows a progression of six pages of dialog frames that explain the basic premise of the game.
  ref: /topics/dialog-functions/#ShowStory
StartAdLib:
  text: StartAdLib()
  def: void StartAdLib(void);
  desc: Detects and initializes the AdLib hardware if it is present, installs the interrupt handler necessary to run the AdLib and PC speaker services, and measures values for CPU-based time delays.
  ref: /topics/adlib-functions/#StartAdLib
StartAdLibPlayback:
  text: StartAdLibPlayback()
  def: void StartAdLibPlayback(void);
  desc: Sets the {{< lookup/cref enableAdLib >}} variable to true, permitting the AdLib service to play music.
  ref: /topics/adlib-functions/#StartAdLibPlayback
StartGameMusic:
  text: StartGameMusic()
  def: void StartGameMusic(word music_num);
  desc: Starts playing the music identified by the numeric `music_num` if the AdLib hardware is available. This function is only safe to use while gameplay is occurring.
  ref: /topics/adlib-functions/#StartGameMusic
StartMenuMusic:
  text: StartMenuMusic()
  def: void StartMenuMusic(word music_num);
  desc: Starts playing the music identified by the numeric `music_num` if the AdLib hardware is available. This function is only safe to use on the title screens, main menu, and its submenus.
  ref: /topics/adlib-functions/#StartMenuMusic
StartSound:
  text: StartSound()
  def: void StartSound(word sound_num);
  desc: Queues the new sound effect identified by `sound_num` for playback and immediately returns.
  ref: /topics/pc-speaker-and-timing-functions/#StartSound
Startup:
  text: Startup()
  def: void Startup(void);
  desc: Initializes the game environment and shows pre-title/copyright screens.
  ref: /topics/startup-and-exit/#Startup
StepPalette:
  text: StepPalette()
  def: void StepPalette(byte *pal_table);
  desc: During each frame of gameplay, steps through each element of the passed palette table `pal_table` and sets the palette key color accordingly, repeating once the {{< lookup/cref END_ANIMATION >}} marker has been reached.
  ref: /topics/c-drawing-functions/#StepPalette
StepWaitSpinner:
  text: StepWaitSpinner()
  def: byte StepWaitSpinner(word x, word y);
  desc: Draws one frame of the wait spinner, immediately returning the most recent scancode seen by the keyboard hardware (even if that scancode is stale).
  ref: /topics/user-interface-functions/#StepWaitSpinner
StopAdLib:
  text: StopAdLib()
  def: void StopAdLib(void);
  desc: Stops all playback from the AdLib card and restores the original system timer interrupt handler.
  ref: /topics/adlib-functions/#StopAdLib
StopAdLibPlayback:
  text: StopAdLibPlayback()
  def: void StopAdLibPlayback(void);
  desc: Clears all the AdLib parameter values that could produce note sounds.
  ref: /topics/adlib-functions/#StopAdLibPlayback
StopMusic:
  text: StopMusic()
  def: void StopMusic(void);
  desc: Silences any active music and prevents the AdLib service from processing any new chunks of music.
  ref: /topics/adlib-functions/#StopMusic
SwitchMusic:
  text: SwitchMusic()
  def: void SwitchMusic(Music *music);
  desc: Stops any currently playing music and starts playing the music specified by `music`.
  ref: /topics/adlib-functions/#SwitchMusic
TILE_BLOCK_EAST:
  text: TILE_BLOCK_EAST()
  def: '#define TILE_BLOCK_EAST(val) (*(tileAttributeData + ((val) / 8)) & 0x08)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "block east movement" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_BLOCK_EAST
TILE_BLOCK_NORTH:
  text: TILE_BLOCK_NORTH()
  def: '#define TILE_BLOCK_NORTH(val) (*(tileAttributeData + ((val) / 8)) & 0x02)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "block north movement" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_BLOCK_NORTH
TILE_BLOCK_SOUTH:
  text: TILE_BLOCK_SOUTH()
  def: '#define TILE_BLOCK_SOUTH(val) (*(tileAttributeData + ((val) / 8)) & 0x01)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "block south movement" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_BLOCK_SOUTH
TILE_BLOCK_WEST:
  text: TILE_BLOCK_WEST()
  def: '#define TILE_BLOCK_WEST(val) (*(tileAttributeData + ((val) / 8)) & 0x04)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "block west movement" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_BLOCK_WEST
TILE_CAN_CLING:
  text: TILE_CAN_CLING()
  def: '#define TILE_CAN_CLING(val) (*(tileAttributeData + ((val) / 8)) & 0x80)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "player can cling" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_CAN_CLING
TILE_IN_FRONT:
  text: TILE_IN_FRONT()
  def: '#define TILE_IN_FRONT(val) (*(tileAttributeData + ((val) / 8)) & 0x20)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "draw in front" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_IN_FRONT
TILE_SLIPPERY:
  text: TILE_SLIPPERY()
  def: '#define TILE_SLIPPERY(val) (*(tileAttributeData + ((val) / 8)) & 0x10)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "is slippery" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_SLIPPERY
TILE_SLOPED:
  text: TILE_SLOPED()
  def: '#define TILE_SLOPED(val) (*(tileAttributeData + ((val) / 8)) & 0x40)'
  desc: Evaluates to a nonzero value if the tile value passed in `val` has its "is sloped" attribute flag set.
  ref: /topics/level-and-map-functions/#TILE_SLOPED
TestPlayerMove:
  text: TestPlayerMove()
  def: word TestPlayerMove(word dir, word x_origin, word y_origin);
  desc: Tests if the player sprite is permitted to move in the direction specified by `dir` and enter the map tiles around `x_origin` and `y_origin`. Depending on the result of the test, one of the {{< lookup/cref MOVE >}} constants is returned.
  ref: /topics/player-movement-functions/#TestPlayerMove
TestSpriteMove:
  text: TestSpriteMove()
  def: word TestSpriteMove(word dir, word sprite_type, word frame, word x_origin, word y_origin);
  desc: Tests if the sprite identified by `sprite_type` and `frame` is permitted to move in the direction specified by `dir` and enter the map tiles around `x_origin` and `y_origin`. Depending on the result of the test, one of the {{< lookup/cref MOVE >}} constants is returned.
  ref: /topics/actors/movement-functions/#TestSpriteMove
TimerInterruptService:
  text: TimerInterruptService()
  def: void interrupt TimerInterruptService(void);
  desc: Handles interrupts that occur on interrupt vector 8 (IRQ 0), which is wired to channel 0 of the system's Programmable Interval Timer. Each time the timer ticks, this function updates the sounds being played by the PC speaker and/or the AdLib.
  ref: /topics/adlib-functions/#TimerInterruptService
TitleLoop:
  text: TitleLoop()
  def: byte TitleLoop(void);
  desc: Runs at the start of the program and is responsible for showing the title screen, credits, demo, and main menu. Additionally, this function reads the keyboard input for the main menu selection and calls the appropriate function in response. Returns one of the {{< lookup/cref DEMO_STATE >}} variables.
  ref: /topics/menu-functions/#TitleLoop
ToggleGodMode:
  text: ToggleGodMode()
  def: void ToggleGodMode(void);
  desc: Inverts the state of the global {{< lookup/cref isGodMode >}} debug variable and presents a dialog informing the user of the current setting.
  ref: /topics/dialog-functions/#ToggleGodMode
ToggleMusic:
  text: ToggleMusic()
  def: void ToggleMusic(void);
  desc: Inverts the setting of the global {{< lookup/cref isMusicEnabled >}} variable then presents a dialog confirming the resulting state. If the system does not have an AdLib compatible card installed, this function is a no-op.
  ref: /topics/dialog-functions/#ToggleMusic
ToggleSound:
  text: ToggleSound()
  def: void ToggleSound(void);
  desc: Inverts the setting of the global {{< lookup/cref isSoundEnabled >}} variable then presents a dialog confirming the resulting state.
  ref: /topics/dialog-functions/#ToggleSound
TryPounce:
  text: TryPounce()
  def: bool TryPounce(int recoil);
  desc: Checks if all necessary player variables are in the correct state to perform a pounce on an enemy actor. If this state is correct, a caller-provided `recoil` amount is imparted to the player and true is returned.
  ref: /topics/player-movement-functions/#TryPounce
UnfoldDNFrame:
  text: UnfoldDNFrame()
  def: word UnfoldDNFrame(void);
  desc: Draws the dialog frame that is used when Duke is speaking to the player. It contains no inner content aside from a Duke sprite image on the left side. Returns the X coordinate where text should be placed to appear within the frame.
  ref: /topics/dialog-functions/#UnfoldDNFrame
UnfoldPlayerFrame:
  text: UnfoldPlayerFrame()
  def: word UnfoldPlayerFrame(void);
  desc: Draws the dialog frame that is used when the player is speaking with Duke. It contains no inner content aside from a player sprite image on the right side. Returns the X coordinate where text should be placed to appear within the frame.
  ref: /topics/dialog-functions/#UnfoldPlayerFrame
UnfoldTextFrame:
  text: UnfoldTextFrame()
  def: |-
    word UnfoldTextFrame(
        int top, int height, int width, char *top_text, char *bottom_text
    );
  desc: Draws an animated, empty text frame to the current draw page with the top edge at tile position `top` and a total size of `width`&times;`height` tiles. The top and bottom edges of the frame are prefilled with `top_text` and `bottom_text` respectively. The frame and its top/bottom texts are always centered horizontally on the screen. The return value is the X tile coordinate of the left edge of the inner text area.
  ref: /topics/user-interface-functions/#UnfoldTextFrame
UpdateBombs:
  text: UpdateBombs()
  def: void UpdateBombs(void);
  desc: Wraps {{< lookup/cref DrawStatusBarBombs >}} with the correct X,Y position for display on the screen. It refreshes the bomb count on the status bar with the current global value.
  ref: /topics/status-bar-functions/#UpdateBombs
UpdateDrawPageSegment:
  text: UpdateDrawPageSegment()
  def: void UpdateDrawPageSegment(void);
  desc: Recalculates the segment address of the video memory where drawing should occur.
  ref: /topics/ega-functions/#UpdateDrawPageSegment
UpdateHealth:
  text: UpdateHealth()
  def: void UpdateHealth(void);
  desc: Wraps {{< lookup/cref DrawSBarHealthHelper >}} and handles draw page selection. It redraws all of the health cells with either filled or empty bars to represent the player's current health.
  ref: /topics/status-bar-functions/#UpdateHealth
UpdateStars:
  text: UpdateStars()
  def: void UpdateStars(void);
  desc: Wraps {{< lookup/cref DrawStatusBarStars >}} with the correct X,Y position for display on the screen. It refreshes the star count on the status bar with the current global value.
  ref: /topics/status-bar-functions/#UpdateStars
ValidateSystem:
  text: ValidateSystem()
  def: void ValidateSystem(void);
  desc: Ensures the system has an EGA adapter, and verifies there is enough free memory. If either are not true, exits back to DOS.
  ref: /topics/startup-and-exit/#ValidateSystem
WaitForAnyKey:
  text: WaitForAnyKey()
  def: byte WaitForAnyKey(void);
  desc: Waits indefinitely for any key to be pressed and released, then returns the scancode of that key.
  ref: /topics/keyboard-functions/#WaitForAnyKey
WaitHard:
  text: WaitHard()
  def: void WaitHard(word delay);
  desc: Pauses execution for `delay` game ticks with no provision for the user to skip the wait.
  ref: /topics/pc-speaker-and-timing-functions/#WaitHard
WaitSoft:
  text: WaitSoft()
  def: void WaitSoft(word delay);
  desc: Pauses execution for `delay` game ticks, returning early if the user presses a key.
  ref: /topics/pc-speaker-and-timing-functions/#WaitSoft
WaitSpinner:
  text: WaitSpinner()
  def: byte WaitSpinner(word x, word y);
  desc: Draws a rotating green icon at tile position (`x`, `y`) on the screen, blocking until a key is pressed. Once that occurs, the scancode of the pressed key is returned.
  ref: /topics/user-interface-functions/#WaitSpinner
WaitWallclock:
  text: WaitWallclock()
  def: void WaitWallclock(word loops);
  desc: Creates an artificial delay using a CPU busy loop, controlled by the iteration count specified in `loops`.
  ref: /topics/adlib-functions/#WaitWallclock
WrapBackdropHorizontal:
  text: WrapBackdropHorizontal()
  def: void WrapBackdropHorizontal(byte *src, byte *dest);
  desc: Creates a modified copy of the backdrop image pointed to by `src` and stores it in the location pointed to by `dest`. The new copy of the image is shifted horizontally toward the left by four pixels, and the four columns of pixels that shift off the left edge are wrapped into the empty space created at the right edge.
  ref: /topics/backdrop-initialization-functions/#WrapBackdropHorizontal
WrapBackdropVertical:
  text: WrapBackdropVertical()
  def: void WrapBackdropVertical(byte *src, byte *dest, byte *scratch);
  desc: Creates a modified copy of the backdrop image pointed to by `src` and stores it in the location pointed to by `dest` using a `scratch` buffer of at least 640 bytes. The new copy of the image is shifted vertically toward the top by four pixels, and the four rows of pixels that shift off the top edge are wrapped into the empty space created at the bottom edge.
  ref: /topics/backdrop-initialization-functions/#WrapBackdropVertical
WriteDemoFrame:
  text: WriteDemoFrame()
  def: bbool WriteDemoFrame(void);
  desc: Captures a snapshot of the global input command state (from the keyboard or joystick) and encodes it into a stream of demo data bytes. Returns true on error.
  ref: /topics/demo-functions/#WriteDemoFrame
main:
  text: main()
  def: void main(int argc, char *argv[]);
  desc: Main entry point for the program.
  ref: /topics/main-and-outer-loop/#main

################################################################################
# GAME GLOBALS                                                                 #
################################################################################

ACT:
  text: ACT_*
  def: |-
    #define ACT_BASKET_NULL         0
    #define ACT_STAR_FLOAT          1
    #define ACT_JUMP_PAD_FLOOR      2
    #define ACT_ARROW_PISTON_W      3
    #define ACT_ARROW_PISTON_E      4
    #define ACT_FIREBALL_W          5
    #define ACT_FIREBALL_E          6
    #define ACT_HEAD_SWITCH_BLUE    7
    #define ACT_HEAD_SWITCH_RED     8
    #define ACT_HEAD_SWITCH_GREEN   9
    #define ACT_HEAD_SWITCH_YELLOW  10
    #define ACT_DOOR_BLUE           11
    #define ACT_DOOR_RED            12
    #define ACT_DOOR_GREEN          13
    #define ACT_DOOR_YELLOW         14
    #define ACT_JUMP_PAD_ROBOT      16
    #define ACT_SPIKES_FLOOR        17
    #define ACT_SPIKES_FLOOR_RECIP  18
    #define ACT_SAW_BLADE_VERT      20
    #define ACT_SAW_BLADE_HORIZ     22
    #define ACT_BOMB_ARMED          24
    #define ACT_CABBAGE             25
    #define ACT_POWER_UP_FLOAT      28
    #define ACT_BARREL_POWER_UP     29
    #define ACT_BASKET_GRN_TOMATO   31
    #define ACT_GRN_TOMATO          32
    #define ACT_BASKET_RED_TOMATO   33
    #define ACT_RED_TOMATO          34
    #define ACT_BARREL_YEL_PEAR     35
    #define ACT_YEL_PEAR            36
    #define ACT_BARREL_ONION        37
    #define ACT_ONION               38
    #define ACT_EXIT_SIGN           39
    #define ACT_SPEAR               40
    #define ACT_SPEAR_RECIP         41
    #define ACT_GRN_SLIME_THROB     42
    #define ACT_GRN_SLIME_DRIP      43
    #define ACT_FLYING_WISP         44
    #define ACT_TWO_TONS_CRUSHER    45
    #define ACT_JUMPING_BULLET      46
    #define ACT_STONE_HEAD_CRUSHER  47
    #define ACT_PYRAMID_CEIL        48
    #define ACT_PYRAMID_FALLING     49
    #define ACT_PYRAMID_FLOOR       50
    #define ACT_GHOST               51
    #define ACT_BASKET_GRN_GOURD    52
    #define ACT_BASKET_BLU_SPHERES  53
    #define ACT_MOON                54
    #define ACT_HEART_PLANT         55
    #define ACT_BARREL_BOMB         56
    #define ACT_BOMB_IDLE           57
    #define ACT_BARREL_JUMP_PAD_FL  58
    #define ACT_SWITCH_PLATFORMS    59
    #define ACT_SWITCH_MYSTERY_WALL 61
    #define ACT_MYSTERY_WALL        62
    #define ACT_SPIKES_FLOOR_BENT   63
    #define ACT_MONUMENT            64
    #define ACT_BABY_GHOST          65
    #define ACT_PROJECTILE_SW       66
    #define ACT_PROJECTILE_SE       67
    #define ACT_PROJECTILE_S        68
    #define ACT_ROAMER_SLUG         69
    #define ACT_PIPE_CORNER_N       70
    #define ACT_PIPE_CORNER_S       71
    #define ACT_PIPE_CORNER_W       72
    #define ACT_PIPE_CORNER_E       73
    #define ACT_BABY_GHOST_EGG_PROX 74
    #define ACT_BABY_GHOST_EGG      75
    #define ACT_SHARP_ROBOT_FLOOR   78
    #define ACT_SHARP_ROBOT_CEIL    80
    #define ACT_BASKET_HAMBURGER    81
    #define ACT_HAMBURGER           82
    #define ACT_CLAM_PLANT_FLOOR    83
    #define ACT_CLAM_PLANT_CEIL     84
    #define ACT_GRAPES              85
    #define ACT_PARACHUTE_BALL      86
    #define ACT_SPIKES_E            87
    #define ACT_SPIKES_E_RECIP      88
    #define ACT_SPIKES_W            89
    #define ACT_BEAM_ROBOT          90
    #define ACT_SPLITTING_PLATFORM  91
    #define ACT_SPARK               92
    #define ACT_BASKET_DANCE_MUSH   93
    #define ACT_DANCING_MUSHROOM    94
    #define ACT_EYE_PLANT_FLOOR     95
    #define ACT_EYE_PLANT_CEIL      96
    #define ACT_BARREL_CABB_HARDER  100
    #define ACT_RED_JUMPER          101
    #define ACT_BOSS                102
    #define ACT_PIPE_OUTLET         104
    #define ACT_PIPE_INLET          105
    #define ACT_SUCTION_WALKER      106
    #define ACT_TRANSPORTER_1       107
    #define ACT_TRANSPORTER_2       108
    #define ACT_PROJECTILE_W        109
    #define ACT_PROJECTILE_E        110
    #define ACT_SPIT_WALL_PLANT_E   111
    #define ACT_SPIT_WALL_PLANT_W   112
    #define ACT_SPITTING_TURRET     113
    #define ACT_SCOOTER             114
    #define ACT_BASKET_PEA_PILE     115
    #define ACT_BASKET_LUMPY_FRUIT  116
    #define ACT_BARREL_HORN         117
    #define ACT_RED_CHOMPER         118
    #define ACT_BASKET_POD          119
    #define ACT_SWITCH_LIGHTS       120
    #define ACT_SWITCH_FORCE_FIELD  121
    #define ACT_FORCE_FIELD_VERT    122
    #define ACT_FORCE_FIELD_HORIZ   123
    #define ACT_PINK_WORM           124
    #define ACT_HINT_GLOBE_0        125
    #define ACT_PUSHER_ROBOT        126
    #define ACT_SENTRY_ROBOT        127
    #define ACT_PINK_WORM_SLIME     128
    #define ACT_DRAGONFLY           129
    #define ACT_WORM_CRATE          130
    #define ACT_BOTTLE_DRINK        134
    #define ACT_GRN_GOURD           135
    #define ACT_BLU_SPHERES         136
    #define ACT_POD                 137
    #define ACT_PEA_PILE            138
    #define ACT_LUMPY_FRUIT         139
    #define ACT_HORN                140
    #define ACT_RED_BERRIES         141
    #define ACT_BARREL_BOTL_DRINK   142
    #define ACT_SATELLITE           143
    #define ACT_IVY_PLANT           145
    #define ACT_YEL_FRUIT_VINE      146
    #define ACT_HEADDRESS           147
    #define ACT_BASKET_HEADDRESS    148
    #define ACT_EXIT_MONSTER_W      149
    #define ACT_EXIT_LINE_VERT      150
    #define ACT_SMALL_FLAME         151
    #define ACT_TULIP_LAUNCHER      152
    #define ACT_ROTATING_ORNAMENT   153
    #define ACT_BLU_CRYSTAL         154
    #define ACT_RED_CRYSTAL_FLOOR   155
    #define ACT_BARREL_RT_ORNAMENT  156
    #define ACT_BARREL_BLU_CRYSTAL  157
    #define ACT_BARREL_RED_CRYSTAL  158
    #define ACT_GRN_TOMATO_FLOAT    159
    #define ACT_RED_TOMATO_FLOAT    160
    #define ACT_YEL_PEAR_FLOAT      161
    #define ACT_BEAR_TRAP           162
    #define ACT_FALLING_FLOOR       163
    #define ACT_EP1_END_1           164
    #define ACT_EP1_END_2           165
    #define ACT_EP1_END_3           166
    #define ACT_BASKET_ROOT         167
    #define ACT_ROOT                168
    #define ACT_BASKET_RG_BERRIES   169
    #define ACT_REDGRN_BERRIES      170
    #define ACT_BASKET_RED_GOURD    171
    #define ACT_RED_GOURD           172
    #define ACT_BARREL_GRN_EMERALD  173
    #define ACT_GRN_EMERALD         174
    #define ACT_BARREL_CLR_DIAMOND  175
    #define ACT_CLR_DIAMOND         176
    #define ACT_SCORE_EFFECT_100    177
    #define ACT_SCORE_EFFECT_200    178
    #define ACT_SCORE_EFFECT_400    179
    #define ACT_SCORE_EFFECT_800    180
    #define ACT_SCORE_EFFECT_1600   181
    #define ACT_SCORE_EFFECT_3200   182
    #define ACT_SCORE_EFFECT_6400   183
    #define ACT_SCORE_EFFECT_12800  184
    #define ACT_EXIT_PLANT          186
    #define ACT_BIRD                187
    #define ACT_ROCKET              188
    #define ACT_INVINCIBILITY_CUBE  189
    #define ACT_PEDESTAL_SMALL      190
    #define ACT_PEDESTAL_MEDIUM     191
    #define ACT_PEDESTAL_LARGE      192
    #define ACT_BARREL_CYA_DIAMOND  193
    #define ACT_CYA_DIAMOND         194
    #define ACT_BARREL_RED_DIAMOND  195
    #define ACT_RED_DIAMOND         196
    #define ACT_BARREL_GRY_OCTAHED  197
    #define ACT_GRY_OCTAHEDRON      198
    #define ACT_BARREL_BLU_EMERALD  199
    #define ACT_BLU_EMERALD         200
    #define ACT_INVINCIBILITY_BUBB  201
    #define ACT_THRUSTER_JET        202
    #define ACT_EXIT_TRANSPORTER    203
    #define ACT_HINT_GLOBE_1        204
    #define ACT_HINT_GLOBE_2        205
    #define ACT_HINT_GLOBE_3        206
    #define ACT_HINT_GLOBE_4        207
    #define ACT_HINT_GLOBE_5        208
    #define ACT_HINT_GLOBE_6        209
    #define ACT_HINT_GLOBE_7        210
    #define ACT_HINT_GLOBE_8        211
    #define ACT_HINT_GLOBE_9        212
    #define ACT_CYA_DIAMOND_FLOAT   213
    #define ACT_RED_DIAMOND_FLOAT   214
    #define ACT_GRY_OCTAHED_FLOAT   215
    #define ACT_BLU_EMERALD_FLOAT   216
    #define ACT_JUMP_PAD_CEIL       217
    #define ACT_BARREL_HEADPHONES   218
    #define ACT_HEADPHONES_FLOAT    219
    #define ACT_HEADPHONES          220
    #define ACT_FROZEN_DN           221
    #define ACT_BANANAS             223
    #define ACT_BASKET_RED_LEAFY    224
    #define ACT_RED_LEAFY_FLOAT     225
    #define ACT_RED_LEAFY           226
    #define ACT_BASKET_BRN_PEAR     227
    #define ACT_BRN_PEAR_FLOAT      228
    #define ACT_BRN_PEAR            229
    #define ACT_BASKET_CANDY_CORN   230
    #define ACT_CANDY_CORN_FLOAT    231
    #define ACT_CANDY_CORN          232
    #define ACT_FLAME_PULSE_W       233
    #define ACT_FLAME_PULSE_E       234
    #define ACT_SPEECH_OUCH         235
    #define ACT_RED_SLIME_THROB     236
    #define ACT_RED_SLIME_DRIP      237
    #define ACT_HINT_GLOBE_10       238
    #define ACT_HINT_GLOBE_11       239
    #define ACT_HINT_GLOBE_12       240
    #define ACT_HINT_GLOBE_13       241
    #define ACT_HINT_GLOBE_14       242
    #define ACT_HINT_GLOBE_15       243
    #define ACT_SPEECH_WHOA         244
    #define ACT_SPEECH_UMPH         245
    #define ACT_SPEECH_WOW_50K      246
    #define ACT_EXIT_MONSTER_N      247
    #define ACT_SMOKE_EMIT_SMALL    248
    #define ACT_SMOKE_EMIT_LARGE    249
    #define ACT_EXIT_LINE_HORIZ     250
    #define ACT_CABBAGE_HARDER      251
    #define ACT_RED_CRYSTAL_CEIL    252
    #define ACT_HINT_GLOBE_16       253
    #define ACT_HINT_GLOBE_17       254
    #define ACT_HINT_GLOBE_18       255
    #define ACT_HINT_GLOBE_19       256
    #define ACT_HINT_GLOBE_20       257
    #define ACT_HINT_GLOBE_21       258
    #define ACT_HINT_GLOBE_22       259
    #define ACT_HINT_GLOBE_23       260
    #define ACT_HINT_GLOBE_24       261
    #define ACT_HINT_GLOBE_25       262
    #define ACT_POWER_UP            263
    #define ACT_STAR                264
    #define ACT_EP2_END_LINE        265
  desc: Defines meaningful names for each actor type defined in the game.
  ref: /topics/global-variables-and-constants/#ACT
Actor:
  text: Actor
  def: |-
    typedef struct {
        word sprite, frame, x, y;
        bool forceactive, stayactive, acrophile, weighted;
        word westfree, eastfree, data1, data2, data3, data4, data5;
        bool dead;
        word falltime;
        byte hurtcooldown;
        ActorTickFunction tickfunc;
    } Actor;
  desc: Holds the current `sprite`, `frame`, `x`, and `y` position of one actor. `dead` actors are inactive and may be reclaimed. `hurtcooldown` is a decrementing counter while the actor is recovering from a player attack. Remaining members are either private-use or uncommon.
  ref: /topics/global-variables-and-constants/#Actor
BACKDROP_HEIGHT:
  text: BACKDROP_HEIGHT
  def: |-
    #define BACKDROP_HEIGHT 18
  desc: Defines the height (in tiles) of backdrop images.
  ref: /topics/global-variables-and-constants/#BACKDROP_HEIGHT
BACKDROP_SIZE:
  text: BACKDROP_SIZE
  def: |-
    #define BACKDROP_SIZE 23040
  desc: Defines the size (in bytes) of a backdrop image.
  ref: /topics/global-variables-and-constants/#BACKDROP_SIZE
BACKDROP_SIZE_EGA_MEM:
  text: BACKDROP_SIZE_EGA_MEM
  def: |-
    #define BACKDROP_SIZE_EGA_MEM (BACKDROP_SIZE / 4)
  desc: Defines the size (in bytes) of EGA memory address space used by a backdrop image.
  ref: /topics/global-variables-and-constants/#BACKDROP_SIZE_EGA_MEM
BACKDROP_WIDTH:
  text: BACKDROP_WIDTH
  def: |-
    #define BACKDROP_WIDTH 40
  desc: Defines the width (in tiles) of backdrop images.
  ref: /topics/global-variables-and-constants/#BACKDROP_WIDTH
CPU_TYPE:
  text: CPU_TYPE_*
  def: |-
    #define CPU_TYPE_8088  0  /* Intel 8088 */
    #define CPU_TYPE_8086  1  /* Intel 8086 */
    #define CPU_TYPE_V20   2  /* NEC V20 */
    #define CPU_TYPE_V30   3  /* NEC V30 */
    #define CPU_TYPE_80188 4  /* Intel 80188 */
    #define CPU_TYPE_80186 5  /* Intel 80186 */
    #define CPU_TYPE_80286 6  /* Intel 80286 */
    #define CPU_TYPE_80386 7  /* Intel 80386 or above */
  desc: Provides meaningful names for the detected processor type.
  ref: /topics/global-variables-and-constants/#CPU_TYPE
DEMO_STATE:
  text: DEMO_STATE_*
  def: |-
    #define DEMO_STATE_NONE   0
    #define DEMO_STATE_RECORD 1
    #define DEMO_STATE_PLAY   2
  desc: Defines constant values that represent the input processing mode that should be used by the game loop.
  ref: /topics/global-variables-and-constants/#DEMO_STATE
DIR2:
  text: DIR2_*
  def: |-
    #define DIR2_SOUTH 0
    #define DIR2_NORTH 1
    #define DIR2_WEST  0
    #define DIR2_EAST  1
  desc: Defines pairs of values for two-way direction systems. "South" and "north" can be negated for a ping-pong movement effect; "east" and "west" can be changed similarly.
  ref: /topics/global-variables-and-constants/#DIR2
DIR4:
  text: DIR4_*
  def: |-
    #define DIR4_NONE  0  /* Used by player bomb/cling */
    #define DIR4_NORTH 0
    #define DIR4_SOUTH 1
    #define DIR4_WEST  2
    #define DIR4_EAST  3
  desc: Defines a set of values for a four-way direction system. "North" and "none" map to the same value, but are named differently to clarify the intent where they appear.
  ref: /topics/global-variables-and-constants/#DIR4
DIR8:
  text: DIR8_*
  def: |-
    #define DIR8_NONE      0  /* Stationary and/or directionless */
    #define DIR8_NORTH     1
    #define DIR8_NORTHEAST 2
    #define DIR8_EAST      3
    #define DIR8_SOUTHEAST 4
    #define DIR8_SOUTH     5
    #define DIR8_SOUTHWEST 6
    #define DIR8_WEST      7
    #define DIR8_NORTHWEST 8
  desc: Defines a set of values for an eight-way direction system. "None," while not technically a direction, is used in places where an object that could move chooses not to.
  ref: /topics/global-variables-and-constants/#DIR8
DRAW_MODE:
  text: DRAW_MODE_*
  def: |-
    #define DRAW_MODE_NORMAL      0
    #define DRAW_MODE_HIDDEN      1
    #define DRAW_MODE_WHITE       2
    #define DRAW_MODE_TRANSLUCENT 3
    #define DRAW_MODE_FLIPPED     4
    #define DRAW_MODE_IN_FRONT    5
    #define DRAW_MODE_ABSOLUTE    6
  desc: Defines the drawing modes available for the sprite drawing functions.
  ref: /topics/global-variables-and-constants/#DRAW_MODE
Decoration:
  text: Decoration
  def: |-
    typedef struct {
        bool alive;
        word sprite, numframes, x, y, dir, numtimes;
    } Decoration;
  desc: Holds the `x` and `y` position for a single decoration, displayed as a `sprite` type with an associated `numframes` count. The decoration moves in the direction specified by `dir` and loops for `numtimes`. `alive` is true when the the decoration slot is in use.
  ref: /topics/global-variables-and-constants/#Decoration
EGA_OFFSET:
  text: EGA_OFFSET_*
  def: |-
    #define EGA_OFFSET_SOLID_TILES  0x4000
    #define EGA_OFFSET_STATUS_TILES 0x8000
    #define EGA_OFFSET_BDROP_EVEN   0xa300
    #define EGA_OFFSET_BDROP_ODD_X  0xb980
    #define EGA_OFFSET_BDROP_ODD_Y  0xd000
    #define EGA_OFFSET_BDROP_ODD_XY 0xe680
  desc: Defines a number of useful EGA memory offsets relative to the adapter's segment address (A000h). Every byte of address space here represents four actual bytes in the EGA's memory, due to the separation of color planes.
  ref: /topics/global-variables-and-constants/#EGA_OFFSET
END_ANIMATION:
  text: END_ANIMATION
  def: |-
    #define END_ANIMATION BYTE_MAX
  desc: Defines the marker that terminates palette animation tables. In Turbo C, this value is FFh.
  ref: /topics/global-variables-and-constants/#END_ANIMATION
END_SCREEN:
  text: END_SCREEN
  def: |-
    #define END_SCREEN "END1.MNI"  /* episode 1, or */
    #define END_SCREEN "END2.MNI"  /* episode 2, or */
    #define END_SCREEN "END3.MNI"  /* episode 3 */
  desc: Defines the group file entry name of the full-screen image to show when the game has been won.
  ref: /topics/global-variables-and-constants/#END_SCREEN
Explosion:
  text: Explosion
  def: |-
    typedef struct {
        word age, x, y;
    } Explosion;
  desc: Holds the `x` and `y` position for a single explosion. `age` is zero if this explosion slot is inactive, or an incrementing value while the explosion progresses.
  ref: /topics/global-variables-and-constants/#Explosion
FILENAME_BASE:
  text: FILENAME_BASE
  def: |-
    #define FILENAME_BASE "COSMO1"  /* episode 1, or */
    #define FILENAME_BASE "COSMO2"  /* episode 2, or */
    #define FILENAME_BASE "COSMO3"  /* episode 3 */
  desc: Defines the base file name (without extension) used for the group, configuration, and save files.
  ref: /topics/global-variables-and-constants/#FILENAME_BASE
FONT:
  text: FONT_*
  def: |-
    #define FONT_UP_ARROW        0x0050
    #define FONT_LOWER_BAR_0     0x0140
    #define FONT_UPPER_BAR_0     0x0168
    #define FONT_0               0x0410
    #define FONT_LOWER_A         0x0ac8
    #define FONT_UPPER_BAR_1     0x0ed8
    #define FONT_LOWER_BAR_1     0x0f00
    #define FONT_BACKGROUND_GRAY 0x0f28
  desc: Provides meaningful names for some, but not all, of the font tile graphics.
  ref: /topics/global-variables-and-constants/#FONT
Fountain:
  text: Fountain
  def: |-
    typedef struct {
        word x, y, dir, stepcount, height, stepmax, delayleft;
    } Fountain;
  desc: Holds the `x` and `y` position for a single fountain. The remaining structure values track the movement direction and height.
  ref: /topics/global-variables-and-constants/#Fountain
GAME_INPUT:
  text: GAME_INPUT_*
  def: |-
    #define GAME_INPUT_CONTINUE 0
    #define GAME_INPUT_QUIT     1
    #define GAME_INPUT_RESTART  2
  desc: Defines a set of symbolic return values for the game input handling functions.
  ref: /topics/global-variables-and-constants/#GAME_INPUT
GAME_VERSION:
  text: GAME_VERSION
  def: |-
    #define GAME_VERSION "1.20"
  desc: Holds a string value which represents the current released version of the game. For centering purposes, this should be four characters long.
  ref: /topics/global-variables-and-constants/#GAME_VERSION
HELP_MENU:
  text: HELP_MENU_*
  def: |-
    #define HELP_MENU_CONTINUE 0
    #define HELP_MENU_RESTART  1
    #define HELP_MENU_QUIT     2
  desc: Defines the possible return values of the in-game help menu.
  ref: /topics/global-variables-and-constants/#HELP_MENU
IMAGE:
  text: IMAGE_*
  def: |-
    #define IMAGE_PRETITLE   0
    #define IMAGE_TITLE      1
    #define IMAGE_CREDITS    2
    #define IMAGE_BONUS      3
    #define IMAGE_END        4
    #define IMAGE_ONE_MOMENT 5
    #define IMAGE_TILEATTR   0x1111
    #define IMAGE_DEMO       0xfff1
    #define IMAGE_NONE       0xffff
  desc: Provides meaningful names for various full-screen image files.
  ref: /topics/global-variables-and-constants/#IMAGE
JOYSTICK:
  text: JOYSTICK_*
  def: |-
    #define JOYSTICK_A 1
    #define JOYSTICK_B 2
  desc: Identifiers for joystick 1 (A) and 2 (B). `JOYSTICK_B` is not used by name anywhere in the game.
  ref: /topics/global-variables-and-constants/#JOYSTICK
JoystickState:
  text: JoystickState
  def: |-
    typedef struct {
        bool button1, button2;
    } JoystickState;
  desc: Holds the state of two buttons (`button1` and `button2`) on a single joystick. The values are true if the corresponding button is currently pressed, or false if it is unpressed.
  ref: /topics/global-variables-and-constants/#JoystickState
LIGHT_SIDE:
  text: LIGHT_SIDE_*
  def: |-
    #define LIGHT_SIDE_WEST   0
    #define LIGHT_SIDE_MIDDLE 1
    #define LIGHT_SIDE_EAST   2
  desc: Defines a set of constants used to identify which "side" (or type) of light is represented.
  ref: /topics/global-variables-and-constants/#LIGHT_SIDE
LIGHT_CAST_DISTANCE:
  text: LIGHT_CAST_DISTANCE
  def: |-
    #define LIGHT_CAST_DISTANCE 11  /* episode 1, or */
    #define LIGHT_CAST_DISTANCE 13  /* episodes 2 and 3 */
  desc: Defines the maximum number of tiles that can be flooded by each light. This limit is lower in the shareware episode.
  ref: /topics/global-variables-and-constants/#LIGHT_CAST_DISTANCE
Light:
  text: Light
  def: |-
    typedef struct {
        word side, x, y;
    } Light;
  desc: Holds the `x` position, `y` position, and type (expressed as a `side`) of a light actor.
  ref: /topics/global-variables-and-constants/#Light
MAX_ACTORS:
  text: MAX_ACTORS
  def: '#define MAX_ACTORS 410'
  desc: Controls the size of the global actor state array, and governs the maximum number of actors that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_ACTORS
MAX_DECORATIONS:
  text: MAX_DECORATIONS
  def: '#define MAX_DECORATIONS 10'
  desc: Controls the size of the global decoration state array, and governs the maximum number of decorations that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_DECORATIONS
MAX_EXPLOSIONS:
  text: MAX_EXPLOSIONS
  def: '#define MAX_EXPLOSIONS 7'
  desc: Controls the size of the global explosion state array, and governs the maximum number of explosions that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_EXPLOSIONS
MAX_FOUNTAINS:
  text: MAX_FOUNTAINS
  def: '#define MAX_FOUNTAINS 10'
  desc: Controls the size of the global fountain state array, and governs the maximum number of fountains that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_FOUNTAINS
MAX_LIGHTS:
  text: MAX_LIGHTS
  def: '#define MAX_LIGHTS 200'
  desc: Controls the size of the global lights array, and governs the maximum number of lights that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_LIGHTS
MAX_PLATFORMS:
  text: MAX_PLATFORMS
  def: '#define MAX_PLATFORMS 10'
  desc: Controls the size of the global platform state array, and governs the maximum number of platforms that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_PLATFORMS
MAX_SHARDS:
  text: MAX_SHARDS
  def: '#define MAX_SHARDS 16'
  desc: Controls the size of the global shards state array, and governs the maximum number of shards that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_SHARDS
MAX_SPAWNERS:
  text: MAX_SPAWNERS
  def: '#define MAX_SPAWNERS 6'
  desc: Controls the size of the global spawner state array, and governs the maximum number of spawners that can be present on a map at any given time.
  ref: /topics/global-variables-and-constants/#MAX_SPAWNERS
MODE1_COLORS:
  text: enum MODE1_COLORS
  def: |-
    enum MODE1_COLORS {
        MODE1_BLACK = BLACK, MODE1_BLUE, MODE1_GREEN, MODE1_CYAN,
        MODE1_RED, MODE1_MAGENTA, MODE1_BROWN, MODE1_LIGHTGRAY,
        MODE1_DARKGRAY = DARKGRAY + 8, MODE1_LIGHTBLUE, MODE1_LIGHTGREEN,
        MODE1_LIGHTCYAN, MODE1_LIGHTRED, MODE1_LIGHTMAGENTA, MODE1_YELLOW,
        MODE1_WHITE
    };
  desc: Defines the colors available for the EGA "display mode 1" palette. Display mode 1 is used in all 200-line modes (like the mode used by this game) and only supports the 16 RGBI output combinations.
  ref: /topics/global-variables-and-constants/#MODE1_COLORS
MOVE:
  text: MOVE_*
  def: |-
    define MOVE_FREE    0
    define MOVE_BLOCKED 1
    define MOVE_SLOPED  2
  desc: Provides meaningful names for the results returned by player/sprite movement test functions.
  ref: /topics/global-variables-and-constants/#MOVE
MUSIC:
  text: MUSIC_*
  def: |-
    #define MUSIC_CAVES   0
    #define MUSIC_SCARRY  1
    #define MUSIC_BOSS    2
    #define MUSIC_RUNAWAY 3
    #define MUSIC_CIRCUS  4
    #define MUSIC_TEKWRD  5
    #define MUSIC_EASYLEV 6
    #define MUSIC_ROCKIT  7
    #define MUSIC_HAPPY   8
    #define MUSIC_DEVO    9
    #define MUSIC_DADODA  10
    #define MUSIC_BELLS   11
    #define MUSIC_DRUMS   12
    #define MUSIC_BANJO   13
    #define MUSIC_EASY2   14
    #define MUSIC_TECK2   15
    #define MUSIC_TECK3   16
    #define MUSIC_TECK4   17
    #define MUSIC_ZZTOP   18
  desc: Provides meaningful names for all of the music numbers available in the game.
  ref: /topics/global-variables-and-constants/#MUSIC
Music:
  text: Music
  def: |-
    typedef struct {
        word length, datahead;
    } Music;
  desc: Holds the `length` in bytes and first word of music data (`datahead`). Memory blocks that are cast to this structure type are generally much larger than the struct, and reading beyond `datahead` is typical and expected.
  ref: /topics/global-variables-and-constants/#Music
PAL_ANIM:
  text: PAL_ANIM_*
  def: |-
    #define PAL_ANIM_NONE       0
    #define PAL_ANIM_LIGHTNING  1
    #define PAL_ANIM_R_Y_W      2
    #define PAL_ANIM_R_G_B      3
    #define PAL_ANIM_MONO       4
    #define PAL_ANIM_W_R_M      5
    #define PAL_ANIM_EXPLOSIONS 6
  desc: Provides meaningful names for all of the palette animation types available in the game.
  ref: /topics/global-variables-and-constants/#PAL_ANIM
PALETTE_KEY_INDEX:
  text: PALETTE_KEY_INDEX
  def: '#define PALETTE_KEY_INDEX MAGENTA'
  desc: Defines which EGA palette register will be affected by the various palette animation functions in the game.
  ref: /topics/global-variables-and-constants/#PALETTE_KEY_INDEX
PLAYER:
  text: PLAYER_*
  def: |-
    #define PLAYER_WALK_1         0
    #define PLAYER_WALK_2         1
    #define PLAYER_WALK_3         2
    #define PLAYER_WALK_4         3
    #define PLAYER_STAND          4
    #define PLAYER_LOOK_NORTH     5
    #define PLAYER_LOOK_SOUTH     6
    #define PLAYER_JUMP           7
    #define PLAYER_FALL           8
    #define PLAYER_CLING          9
    #define PLAYER_CLING_OPPOSITE 10
    #define PLAYER_CLING_NORTH    11
    #define PLAYER_CLING_SOUTH    12
    #define PLAYER_FALL_LONG      13
    #define PLAYER_CROUCH         14
    #define PLAYER_PAIN           15
    #define PLAYER_FALL_SEVERE    16
    #define PLAYER_PUSHED         17
    #define PLAYER_STAND_BLINK    18
    #define PLAYER_SHAKE_1        19
    #define PLAYER_SHAKE_2        20
    #define PLAYER_SHAKE_3        21
    #define PLAYER_JUMP_LONG      22
    #define PLAYER_DEAD_1         46
    #define PLAYER_DEAD_2         47
    #define PLAYER_HIDDEN         BYTE_MAX
  desc: Provides meaningful names for the player sprite frames available in the game.
  ref: /topics/global-variables-and-constants/#PLAYER
PLAYER_BASE:
  text: PLAYER_BASE_*
  def: |-
    #define PLAYER_BASE_WEST 0
    #define PLAYER_BASE_EAST 23
  desc: Defines the base frame number for the west- and east-facing sets of player sprites.
  ref: /topics/global-variables-and-constants/#PLAYER_BASE
Platform:
  text: Platform
  def: |-
    typedef struct {
        word x, y;
        word mapstash[5];
    } Platform;
  desc: Holds the `x` and `y` position for a single platform. The `mapstash[]` array provides temporary storage space for the five map tiles that are swapped out as the platform's tiles cover them.
  ref: /topics/global-variables-and-constants/#Platform
POUNCE_HINT:
  text: POUNCE_HINT_*
  def: |-
    #define POUNCE_HINT_UNSEEN 0
    #define POUNCE_HINT_QUEUED 1
    #define POUNCE_HINT_SEEN   2
  desc: Defines constants that represent the current state of the "jump on top of creatures..." hint message.
  ref: /topics/global-variables-and-constants/#POUNCE_HINT
RESTORE_GAME:
  text: RESTORE_GAME_*
  def: |-
    #define RESTORE_GAME_NOT_FOUND 0
    #define RESTORE_GAME_SUCCESS   1
    #define RESTORE_GAME_ABORT     2
  desc: Defines constants that represent the possible outcomes of a user's interaction with the "restore game" menu.
  ref: /topics/global-variables-and-constants/#RESTORE_GAME
SAVE_SLOT_INDEX:
  text: SAVE_SLOT_INDEX
  def: |-
    #define SAVE_SLOT_INDEX 9
  desc: Holds the (zero-indexed) position in the filename template string where save game slot numbers should be inserted.
  ref: /topics/global-variables-and-constants/#SAVE_SLOT_INDEX
SCANCODE:
  text: SCANCODE_*
  def: |-
    #define SCANCODE_NULL        0x00
    #define SCANCODE_ESC         0x01
    #define SCANCODE_1           0x02  /* 1  ! */
    #define SCANCODE_2           0x03  /* 2  @ */
    #define SCANCODE_3           0x04  /* 3  # */
    #define SCANCODE_4           0x05  /* 4  $ */
    #define SCANCODE_5           0x06  /* 5  % */
    #define SCANCODE_6           0x07  /* 6  ^ */
    #define SCANCODE_7           0x08  /* 7  & */
    #define SCANCODE_8           0x09  /* 8  * */
    #define SCANCODE_9           0x0a  /* 9  ( */
    #define SCANCODE_0           0x0b  /* 0  ) */
    #define SCANCODE_MINUS       0x0c  /* -  _ */
    #define SCANCODE_EQUAL       0x0d  /* =  + */
    #define SCANCODE_BACKSPACE   0x0e
    #define SCANCODE_TAB         0x0f
    #define SCANCODE_Q           0x10  /* q  Q */
    #define SCANCODE_W           0x11  /* w  W */
    #define SCANCODE_E           0x12  /* e  E */
    #define SCANCODE_R           0x13  /* r  R */
    #define SCANCODE_T           0x14  /* t  T */
    #define SCANCODE_Y           0x15  /* y  Y */
    #define SCANCODE_U           0x16  /* u  U */
    #define SCANCODE_I           0x17  /* i  I */
    #define SCANCODE_O           0x18  /* o  O */
    #define SCANCODE_P           0x19  /* p  P */
    #define SCANCODE_LEFT_BRACE  0x1a  /* [  { */
    #define SCANCODE_RIGHT_BRACE 0x1b  /* ]  } */
    #define SCANCODE_ENTER       0x1c
    #define SCANCODE_CTRL        0x1d
    #define SCANCODE_A           0x1e  /* a  A */
    #define SCANCODE_S           0x1f  /* s  S */
    #define SCANCODE_D           0x20  /* d  D */
    #define SCANCODE_F           0x21  /* f  F */
    #define SCANCODE_G           0x22  /* g  G */
    #define SCANCODE_H           0x23  /* h  H */
    #define SCANCODE_J           0x24  /* j  J */
    #define SCANCODE_K           0x25  /* k  K */
    #define SCANCODE_L           0x26  /* l  L */
    #define SCANCODE_SEMICOLON   0x27  /* ;  : */
    #define SCANCODE_APOSTROPHE  0x28  /* '  " */
    #define SCANCODE_GRAVE       0x29  /* `  ~ */
    #define SCANCODE_LEFT_SHIFT  0x2a
    #define SCANCODE_BACKSLASH   0x2b  /* \  | */
    #define SCANCODE_Z           0x2c  /* z  Z */
    #define SCANCODE_X           0x2d  /* x  X */
    #define SCANCODE_C           0x2e  /* c  C */
    #define SCANCODE_V           0x2f  /* v  V */
    #define SCANCODE_B           0x30  /* b  B */
    #define SCANCODE_N           0x31  /* n  N */
    #define SCANCODE_M           0x32  /* m  M */
    #define SCANCODE_COMMA       0x33  /* ,  < */
    #define SCANCODE_DOT         0x34  /* .  > */
    #define SCANCODE_SLASH       0x35  /* /  ? */
    #define SCANCODE_RIGHT_SHIFT 0x36
    #define SCANCODE_KP_ASTERISK 0x37  /* *  PrtSc */
    #define SCANCODE_ALT         0x38
    #define SCANCODE_SPACE       0x39
    #define SCANCODE_CAPS_LOCK   0x3a
    #define SCANCODE_F1          0x3b
    #define SCANCODE_F2          0x3c
    #define SCANCODE_F3          0x3d
    #define SCANCODE_F4          0x3e
    #define SCANCODE_F5          0x3f
    #define SCANCODE_F6          0x40
    #define SCANCODE_F7          0x41
    #define SCANCODE_F8          0x42
    #define SCANCODE_F9          0x43
    #define SCANCODE_F10         0x44
    #define SCANCODE_NUM_LOCK    0x45
    #define SCANCODE_SCROLL_LOCK 0x46
    #define SCANCODE_KP_7        0x47  /* Home         7 */
    #define SCANCODE_KP_8        0x48  /* Up Arrow     8 */
    #define SCANCODE_KP_9        0x49  /* Pg Up        9 */
    #define SCANCODE_KP_MINUS    0x4a  /*              - */
    #define SCANCODE_KP_4        0x4b  /* Left Arrow   4 */
    #define SCANCODE_KP_5        0x4c  /*              5 */
    #define SCANCODE_KP_6        0x4d  /* Right Arrow  6 */
    #define SCANCODE_KP_PLUS     0x4e  /*              + */
    #define SCANCODE_KP_1        0x4f  /* End          1 */
    #define SCANCODE_KP_2        0x50  /* Down Arrow   2 */
    #define SCANCODE_KP_3        0x51  /* Pg Down      3 */
    #define SCANCODE_KP_0        0x52  /* Ins          0 */
    #define SCANCODE_KP_DOT      0x53  /* Del          . */
    #define SCANCODE_SYS_REQ     0x54
    #define SCANCODE_F11         0x57
    #define SCANCODE_F12         0x58
    #define SCANCODE_EXTENDED    0xe0
  desc: Provides meaningful names for all of the IBM PC/AT keyboard scancodes. These are all well-defined and well-known.
  ref: /topics/global-variables-and-constants/#SCANCODE
SCROLLH:
  text: SCROLLH
  def: |-
    #define SCROLLH 18
  desc: The height of the scrolling view into the game world, in tiles.
  ref: /topics/global-variables-and-constants/#SCROLLH
SCROLLW:
  text: SCROLLW
  def: |-
    #define SCROLLW 38
  desc: The width of the scrolling view into the game world, in tiles.
  ref: /topics/global-variables-and-constants/#SCROLLW
SND:
  text: SND_*
  def: |-
    #define SND_BIG_PRIZE           1
    #define SND_PLAYER_JUMP         2
    #define SND_PLAYER_LAND         3
    #define SND_PLAYER_CLING        4
    #define SND_PLAYER_HIT_HEAD     5
    #define SND_PLAYER_POUNCE       6
    #define SND_PLAYER_DEATH        7
    #define SND_DOOR_UNLOCK         8
    #define SND_SPIKES_MOVE         9
    #define SND_EXPLOSION           10
    #define SND_WIN_LEVEL           11
    #define SND_BARREL_DESTROY_1    12
    #define SND_PRIZE               13
    #define SND_PLAYER_HURT         14
    #define SND_FOOT_SWITCH_MOVE    15
    #define SND_FOOT_SWITCH_ON      16
    #define SND_ROAMER_GIFT         17
    #define SND_DESTROY_SATELLITE   18
    #define SND_PLAYER_FOOTSTEP     19
    #define SND_PUSH_PLAYER         20
    #define SND_DRIP                21
    #define SND_PIPE_CORNER_HIT     22
    #define SND_TRANSPORTER_ON      23
    #define SND_SCOOTER_PUTT        24
    #define SND_DESTROY_SOLID       25
    #define SND_PROJECTILE_LAUNCH   26
    #define SND_BIG_OBJECT_HIT      27
    #define SND_NO_BOMBS            28
    #define SND_PLACE_BOMB          29
    #define SND_HINT_DIALOG_ALERT   30
    #define SND_RED_JUMPER_JUMP     31
    #define SND_RED_JUMPER_LAND     32
    #define SND_BGHOST_EGG_CRACK    33
    #define SND_BGHOST_EGG_HATCH    34
    #define SND_SAW_BLADE_MOVE      35
    #define SND_FIREBALL_LAUNCH     36
    #define SND_OBJECT_HIT          37
    #define SND_EXIT_MONSTER_OPEN   38
    #define SND_EXIT_MONSTER_INGEST 39
    #define SND_BEAR_TRAP_CLOSE     40
    #define SND_PAUSE_GAME          41
    #define SND_WEEEEEEEE           42
    #define SND_JUMP_PAD_ROBOT      43
    #define SND_TEXT_TYPEWRITER     44
    #define SND_BONUS_STAGE         45
    #define SND_SHARD_BOUNCE        46
    #define SND_TULIP_LAUNCH        47
    #define SND_NEW_GAME            48
    #define SND_ROCKET_BURN         49
    #define SND_SMASH               50
    #define SND_HIGH_SCORE_DISPLAY  51
    #define SND_HIGH_SCORE_SET      52
    #define SND_IVY_PLANT_RISE      53
    #define SND_FLAME_PULSE         54
    #define SND_BOSS_DAMAGE         55
    #define SND_BOSS_MOVE           56
    #define SND_SPEECH_BUBBLE       57
    #define SND_BABY_GHOST_JUMP     58
    #define SND_BABY_GHOST_LAND     59
    #define SND_THUNDER             60
    #define SND_BARREL_DESTROY_2    61
    #define SND_TULIP_INGEST        62
    #define SND_PLANT_MOUTH_OPEN    63
    #define SND_ENTERING_LEVEL_NUM  64
    #define SND_BOSS_LAUNCH         65
  desc: Provides meaningful names for all of the PC speaker sound effects included with the game.
  ref: /topics/global-variables-and-constants/#SND
SPA:
  text: SPA_*
  def: |-
    #define SPA_PLAYER_START    0
    #define SPA_PLATFORM        1
    #define SPA_FOUNTAIN_SMALL  2
    #define SPA_FOUNTAIN_MEDIUM 3
    #define SPA_FOUNTAIN_LARGE  4
    #define SPA_FOUNTAIN_HUGE   5
    #define SPA_LIGHT_WEST      6
    #define SPA_LIGHT_MIDDLE    7
    #define SPA_LIGHT_EAST      8
  desc: Defines meaningful names for each special actor type defined in the game.
  ref: /topics/global-variables-and-constants/#SPA
SPR:
  text: SPR_*
  def: |-
    #define SPR_BASKET             0
    #define SPR_STAR               1
    #define SPR_JUMP_PAD           2
    #define SPR_ARROW_PISTON_W     3
    #define SPR_ARROW_PISTON_E     4
    #define SPR_FIREBALL           5
    #define SPR_6                  6
    #define SPR_HEAD_SWITCH_BLUE   7
    #define SPR_HEAD_SWITCH_RED    8
    #define SPR_HEAD_SWITCH_GREEN  9
    #define SPR_HEAD_SWITCH_YELLOW 10
    #define SPR_DOOR_BLUE          11
    #define SPR_DOOR_RED           12
    #define SPR_DOOR_GREEN         13
    #define SPR_DOOR_YELLOW        14
    #define SPR_SPARKLE_SHORT      15
    #define SPR_JUMP_PAD_ROBOT     16
    #define SPR_SPIKES_FLOOR       17
    #define SPR_SPIKES_FLOOR_RECIP 18
    #define SPR_SCOOTER_EXHAUST    19
    #define SPR_SAW_BLADE          20
    #define SPR_POUNCE_DEBRIS      21
    #define SPR_SPARKLE_LONG       23
    #define SPR_BOMB_ARMED         24
    #define SPR_CABBAGE            25
    #define SPR_EXPLOSION          26
    #define SPR_RAINDROP           27
    #define SPR_POWER_UP           28
    #define SPR_BARREL             29
    #define SPR_BARREL_SHARDS      30
    #define SPR_GRN_TOMATO         32
    #define SPR_RED_TOMATO         34
    #define SPR_YEL_PEAR           36
    #define SPR_ONION              38
    #define SPR_EXIT_SIGN          39
    #define SPR_SPEAR              41
    #define SPR_GREEN_SLIME        43
    #define SPR_FLYING_WISP        44
    #define SPR_TWO_TONS_CRUSHER   45
    #define SPR_JUMPING_BULLET     46
    #define SPR_STONE_HEAD_CRUSHER 47
    #define SPR_48                 48
    #define SPR_PYRAMID            49
    #define SPR_50                 50
    #define SPR_GHOST              51
    #define SPR_MOON               54
    #define SPR_HEART_PLANT        55
    #define SPR_BOMB_IDLE          57
    #define SPR_FOOT_SWITCH_KNOB   60
    #define SPR_MYSTERY_WALL       62
    #define SPR_SPIKES_FLOOR_BENT  63
    #define SPR_MONUMENT           64
    #define SPR_BABY_GHOST         65
    #define SPR_PROJECTILE         68
    #define SPR_ROAMER_SLUG        69
    #define SPR_PIPE_CORNER_N      70
    #define SPR_PIPE_CORNER_S      71
    #define SPR_PIPE_CORNER_W      72
    #define SPR_PIPE_CORNER_E      73
    #define SPR_74                 74
    #define SPR_BABY_GHOST_EGG     75
    #define SPR_BGHOST_EGG_SHARD_1 76
    #define SPR_BGHOST_EGG_SHARD_2 77
    #define SPR_SHARP_ROBOT_FLOOR  78
    #define SPR_FOUNTAIN           79
    #define SPR_SHARP_ROBOT_CEIL   80
    #define SPR_HAMBURGER          82
    #define SPR_CLAM_PLANT         83
    #define SPR_84                 84
    #define SPR_GRAPES             85
    #define SPR_PARACHUTE_BALL     86
    #define SPR_SPIKES_E           87
    #define SPR_SPIKES_E_RECIP     88
    #define SPR_SPIKES_W           89
    #define SPR_BEAM_ROBOT         90
    #define SPR_SPLITTING_PLATFORM 91
    #define SPR_SPARK              92
    #define SPR_DANCING_MUSHROOM   94
    #define SPR_EYE_PLANT          95
    #define SPR_96                 96
    #define SPR_SMOKE              97
    #define SPR_SMOKE_LARGE        98
    #define SPR_SPARKLE_SLIPPERY   99
    #define SPR_RED_JUMPER         101
    #define SPR_BOSS               102
    #define SPR_PIPE_END           105
    #define SPR_SUCTION_WALKER     106
    #define SPR_TRANSPORTER_107    107
    #define SPR_TRANSPORTER_108    108
    #define SPR_SPIT_WALL_PLANT_E  111
    #define SPR_SPIT_WALL_PLANT_W  112
    #define SPR_SPITTING_TURRET    113
    #define SPR_SCOOTER            114
    #define SPR_RED_CHOMPER        118
    #define SPR_FORCE_FIELD_VERT   122
    #define SPR_FORCE_FIELD_HORIZ  123
    #define SPR_PINK_WORM          124
    #define SPR_HINT_GLOBE         125
    #define SPR_PUSHER_ROBOT       126
    #define SPR_SENTRY_ROBOT       127
    #define SPR_PINK_WORM_SLIME    128
    #define SPR_DRAGONFLY          129
    #define SPR_WORM_CRATE         130
    #define SPR_WORM_CRATE_SHARDS  131
    #define SPR_BGHOST_EGG_SHARD_3 132
    #define SPR_BGHOST_EGG_SHARD_4 133
    #define SPR_BOTTLE_DRINK       134
    #define SPR_GRN_GOURD          135
    #define SPR_BLU_SPHERES        136
    #define SPR_POD                137
    #define SPR_PEA_PILE           138
    #define SPR_LUMPY_FRUIT        139
    #define SPR_HORN               140
    #define SPR_RED_BERRIES        141
    #define SPR_SATELLITE          143
    #define SPR_SATELLITE_SHARDS   144
    #define SPR_IVY_PLANT          145
    #define SPR_YEL_FRUIT_VINE     146
    #define SPR_HEADDRESS          147
    #define SPR_EXIT_MONSTER_W     149
    #define SPR_150                150
    #define SPR_SMALL_FLAME        151
    #define SPR_TULIP_LAUNCHER     152
    #define SPR_ROTATING_ORNAMENT  153
    #define SPR_BLU_CRYSTAL        154
    #define SPR_RED_CRYSTAL        155
    #define SPR_BEAR_TRAP          162
    #define SPR_FALLING_FLOOR      163
    #define SPR_164                164
    #define SPR_ROOT               168
    #define SPR_REDGRN_BERRIES     170
    #define SPR_RED_GOURD          172
    #define SPR_GRN_EMERALD        174
    #define SPR_CLR_DIAMOND        176
    #define SPR_SCORE_EFFECT_100   177
    #define SPR_SCORE_EFFECT_200   178
    #define SPR_SCORE_EFFECT_400   179
    #define SPR_SCORE_EFFECT_800   180
    #define SPR_SCORE_EFFECT_1600  181
    #define SPR_SCORE_EFFECT_3200  182
    #define SPR_SCORE_EFFECT_6400  183
    #define SPR_SCORE_EFFECT_12800 184
    #define SPR_BASKET_SHARDS      185
    #define SPR_EXIT_PLANT         186
    #define SPR_BIRD               187
    #define SPR_ROCKET             188
    #define SPR_INVINCIBILITY_CUBE 189
    #define SPR_PEDESTAL           192
    #define SPR_CYA_DIAMOND        194
    #define SPR_RED_DIAMOND        196
    #define SPR_GRY_OCTAHEDRON     198
    #define SPR_BLU_EMERALD        200
    #define SPR_INVINCIBILITY_BUBB 201
    #define SPR_THRUSTER_JET       202
    #define SPR_HEADPHONES         220
    #define SPR_FROZEN_DN          221
    #define SPR_SPEECH_MULTI       222
    #define SPR_BANANAS            223
    #define SPR_RED_LEAFY          226
    #define SPR_BRN_PEAR           229
    #define SPR_CANDY_CORN         232
    #define SPR_FLAME_PULSE_W      233
    #define SPR_FLAME_PULSE_E      234
    #define SPR_SPEECH_OUCH        235
    #define SPR_RED_SLIME          237
    #define SPR_SPEECH_WHOA        244
    #define SPR_SPEECH_UMPH        245
    #define SPR_SPEECH_WOW_50K     246
    #define SPR_EXIT_MONSTER_N     247
    #define SPR_248                248
    #define SPR_249                249
    #define SPR_250                250
    #define SPR_265                265
    #define SPR_DEMO_OVERLAY       266
  desc: Defines meaningful names for each sprite type defined in the game.
  ref: /topics/global-variables-and-constants/#SPR
Shard:
  text: Shard
  def: |-
    typedef struct {
        word sprite, x, y, frame, age, xmode;
        bool bounced;
    } Shard;
  desc: Holds the `x` and `y` position for a single shard, comprised of a `sprite` type and a `frame`. `age` is zero if this shard slot is inactive, or an incrementing value while the spawner progresses. `xmode` controls the horizontal movement behavior, `bounced` is a flag that becomes true once the shard has hit the ground.
  ref: /topics/global-variables-and-constants/#Shard
Spawner:
  text: Spawner
  def: |-
    typedef struct {
        word actor, x, y, age;
    } Spawner;
  desc: Holds the `x` and `y` position for a single spawner. `age` is zero if this spawner slot is inactive, or an incrementing value while the spawner progresses. `actor` is the actor type that will be created once the spawner completes.
  ref: /topics/global-variables-and-constants/#Spawner
TILE:
  text: TILE_*
  def: |-
    #define TILE_EMPTY              0x0000
    #define TILE_INVISIBLE_PLATFORM 0x0048
    #define TILE_STRIPED_PLATFORM   0x0050
    #define TILE_SWITCH_FREE_1N     0x3d68
    #define TILE_SWITCH_BLOCK_1     0x3d88
    #define TILE_SWITCH_BLOCK_2     0x3d90
    #define TILE_SWITCH_BLOCK_3     0x3d98
    #define TILE_SWITCH_BLOCK_4     0x3da0
    #define TILE_SWITCH_FREE_1L     0x3da8
    #define TILE_DOOR_BLOCK         0x3dc8
    #define TILE_BLUE_PLATFORM      0x3dd0
    #define TILE_MYSTERY_BLOCK_NW   0x3df8
    #define TILE_MYSTERY_BLOCK_NE   0x3e00
    #define TILE_MYSTERY_BLOCK_SW   0x3e08
    #define TILE_MYSTERY_BLOCK_SE   0x3e10
    #define TILE_WAIT_SPINNER_1     0x3e18
    #define TILE_TXTFRAME_NORTHWEST 0x3e38
    #define TILE_TXTFRAME_NORTHEAST 0x3e40
    #define TILE_TXTFRAME_SOUTHWEST 0x3e48
    #define TILE_TXTFRAME_SOUTHEAST 0x3e50
    #define TILE_TXTFRAME_NORTH     0x3e58
    #define TILE_TXTFRAME_SOUTH     0x3e60
    #define TILE_TXTFRAME_WEST      0x3e68
    #define TILE_TXTFRAME_EAST      0x3e70
    #define TILE_DARK_GRAY          0x3e78
    #define TILE_MASKED_0           0x3e80  /* aka 16,000 */
  desc: Provides meaningful names for certain map tile values.
  ref: /topics/global-variables-and-constants/#TILE
TITLE_SCREEN:
  text: TITLE_SCREEN
  def: |-
    #define TITLE_SCREEN "TITLE1.MNI"  /* episode 1, or */
    #define TITLE_SCREEN "TITLE2.MNI"  /* episode 2, or */
    #define TITLE_SCREEN "TITLE3.MNI"  /* episode 3 */
  desc: Defines the group file entry name of the full-screen image to show during the main title sequence.
  ref: /topics/global-variables-and-constants/#TITLE_SCREEN
WORD_MAX:
  text: WORD_MAX
  def: '#define WORD_MAX 0xffffU'
  desc: Constant holding the largest expressible 16-bit unsigned integer value, also known as a machine word.
  ref: /topics/global-variables-and-constants/#WORD_MAX
activeMusic:
  text: activeMusic
  def: Music *activeMusic;
  desc: Holds a pointer to the structure containing the length and data bytes of the most recent piece of music that has been started.
  ref: /topics/global-variables-and-constants/#activeMusic
activePage:
  text: activePage
  def: word activePage;
  desc: Holds the zero-indexed number (0 or 1) of the graphics page that is currently being shown on the screen.
  ref: /topics/global-variables-and-constants/#activePage
activeSoundIndex:
  text: activeSoundIndex
  def: word activeSoundIndex;
  desc: Holds the zero-indexed sound number of the PC speaker sound effect that is currently playing.
  ref: /topics/global-variables-and-constants/#activeSoundIndex
activeSoundPriority:
  text: activeSoundPriority
  def: word activeSoundPriority;
  desc: Holds the priority value of the PC speaker sound effect that is currently playing.
  ref: /topics/global-variables-and-constants/#activeSoundPriority
activeTransporter:
  text: activeTransporter
  def: word activeTransporter;
  desc: Holds the number of the destination transporter when one is in use, or zero during normal gameplay.
  ref: /topics/global-variables-and-constants/#activeTransporter
actorInfoData:
  text: actorInfoData
  def: word *actorInfoData;
  desc: Points to a block of memory containing tile info data (widths, heights, and offsets) for actor sprites.
  ref: /topics/global-variables-and-constants/#actorInfoData
actorTileData:
  text: actorTileData[]
  def: byte *actorTileData[3];
  desc: Points to masked tile image data used to draw actors, decorations, spawners, explosions, shards, and miscellaneous UI sprites.
  ref: /topics/global-variables-and-constants/#actorTileData
actors:
  text: actors[]
  def: Actor actors[MAX_ACTORS];
  desc: Contains a fixed amount of space for all of the actors defined on the current map.
  ref: /topics/global-variables-and-constants/#actors
areForceFieldsActive:
  text: areForceFieldsActive
  def: bool areForceFieldsActive;
  desc: When true, any force fields present on the map are enabled.
  ref: /topics/global-variables-and-constants/#areForceFieldsActive
areLightsActive:
  text: areLightsActive
  def: bool areLightsActive;
  desc: When true, any lights present on the map are enabled.
  ref: /topics/global-variables-and-constants/#areLightsActive
arePlatformsActive:
  text: arePlatformsActive
  def: bool arePlatformsActive;
  desc: When true, any platforms present on the map are enabled.
  ref: /topics/global-variables-and-constants/#arePlatformsActive
backdropNames:
  text: backdropNames[]
  def: |-
    char *backdropNames[] = {
        "bdblank.mni", "bdpipe.MNI", "bdredsky.MNI", "bdrocktk.MNI",
        "bdjungle.MNI", "bdstar.MNI", "bdwierd.mni", "bdcave.mni", "bdice.mni",
        "bdshrum.mni", "bdtechms.mni", "bdnewsky.mni", "bdstar2.mni",
        "bdstar3.mni", "bdforest.mni", "bdmountn.mni", "bdguts.mni",
        "bdbrktec.mni", "bdclouds.mni", "bdfutcty.mni", "bdice2.mni",
        "bdcliff.mni", "bdspooky.mni", "bdcrystl.mni", "bdcircut.mni",
        "bdcircpc.mni"
    };
  desc: Holds a list of all group file entry names that refer to backdrop image data.
  ref: /topics/global-variables-and-constants/#backdropNames
backdropTable:
  text: backdropTable[]
  def: word backdropTable[BACKDROP_WIDTH * BACKDROP_HEIGHT * 4];
  desc: A lookup table containing 2,880 words of precalculated offset data used for drawing the in-game parallax scrolling backdrop. It contains four identical copies of the backdrop's tile offsets, which allows for efficient wrapping without using modulo division.
  ref: /topics/global-variables-and-constants/#backdropTable
blockActionCmds:
  text: blockActionCmds
  def: bool blockActionCmds;
  desc: When true, prevents the player from moving, being hurt, or being drawn.
  ref: /topics/global-variables-and-constants/#blockActionCmds
blockMovementCmds:
  text: blockMovementCmds
  def: bbool blockMovementCmds;
  desc: When true, prevents the player from walking or jumping.
  ref: /topics/global-variables-and-constants/#blockMovementCmds
canPlayerCling:
  text: canPlayerCling
  def: bool canPlayerCling;
  desc: Holds a true value if the player is able to cling to the most recently tested east/west surface.
  ref: /topics/global-variables-and-constants/#canPlayerCling
cartoonInfoData:
  text: cartoonInfoData
  def: word *cartoonInfoData;
  desc: Points to a block of memory containing tile info data (widths, heights, and offsets) for cartoon sprites.
  ref: /topics/global-variables-and-constants/#cartoonInfoData
cmdBomb:
  text: cmdBomb
  def: bbool cmdBomb;
  desc: Controls the state of the player's "drop bomb" action command.
  ref: /topics/global-variables-and-constants/#cmdBomb
cmdEast:
  text: cmdEast
  def: bbool cmdEast;
  desc: Controls the state of the player's "walk east" movement command.
  ref: /topics/global-variables-and-constants/#cmdEast
cmdJump:
  text: cmdJump
  def: bbool cmdJump;
  desc: Controls the state of the player's "jump" movement command.
  ref: /topics/global-variables-and-constants/#cmdJump
cmdNorth:
  text: cmdNorth
  def: bbool cmdNorth;
  desc: Controls the state of the player's "look north" action command.
  ref: /topics/global-variables-and-constants/#cmdNorth
cmdSouth:
  text: cmdSouth
  def: bbool cmdSouth;
  desc: Controls the state of the player's "look south" action command.
  ref: /topics/global-variables-and-constants/#cmdSouth
cmdWest:
  text: cmdWest
  def: bbool cmdWest;
  desc: Controls the state of the player's "walk west" movement command.
  ref: /topics/global-variables-and-constants/#cmdWest
decorationFrame:
  text: decorationFrame[]
  def: word decorationFrame[MAX_DECORATIONS];
  desc: Contains the current frame number being displayed by each decoration slot.
  ref: /topics/global-variables-and-constants/#decorationFrame
decorations:
  text: decorations[]
  def: Decoration decorations[MAX_DECORATIONS];
  desc: Contains a fixed amount of space for all of the decoration entities defined on the current map.
  ref: /topics/global-variables-and-constants/#decorations
demoDataLength:
  text: demoDataLength
  def: word demoDataLength;
  desc: Holds the size, in bytes, of the demo data currently loaded into memory.
  ref: /topics/global-variables-and-constants/#demoDataLength
demoDataPos:
  text: demoDataPos
  def: word demoDataPos;
  desc: Holds the byte offset of the current read/write position within the demo data while playing/recording a demo.
  ref: /topics/global-variables-and-constants/#demoDataPos
demoState:
  text: demoState
  def: byte demoState;
  desc: Indicates the current state of input handling for gameplay.
  ref: /topics/global-variables-and-constants/#demoState
dir8X:
  text: dir8X[]
  def: int dir8X[] = {0,  0,  1,  1,  1,  0, -1, -1, -1};
  desc: Defines the horizontal movement components for the game's eight-way direction system.
  ref: /topics/global-variables-and-constants/#dir8X
dir8Y:
  text: dir8Y[]
  def: int dir8Y[] = {0, -1, -1,  0,  1,  1,  1,  0, -1};
  desc: Defines the vertical movement components for the game's eight-way direction system.
  ref: /topics/global-variables-and-constants/#dir8Y
drawPageNumber:
  text: drawPageNumber
  def: word drawPageNumber;
  desc: Holds the zero-indexed number (0 or 1) of the graphics page that the drawing procedures will operate on.
  ref: /topics/global-variables-and-constants/#drawPageNumber
drawPageSegment:
  text: drawPageSegment
  def: word drawPageSegment;
  desc: Holds the memory segment address of the graphics page that the drawing procedures will operate on.
  ref: /topics/global-variables-and-constants/#drawPageSegment
enableAdLib:
  text: enableAdLib
  def: bool enableAdLib;
  desc: When true, this permits the AdLib service to actually send music data to the AdLib hardware. When false, this inhibits these transfers, holding the AdLib hardware "frozen" in its current state.
  ref: /topics/global-variables-and-constants/#enableAdLib
enableSpeaker:
  text: enableSpeaker
  def: bool enableSpeaker;
  desc: When true, this permits the PC speaker hardware to actually emit sounds. When false, this unconditionally silences the speaker output.
  ref: /topics/global-variables-and-constants/#enableSpeaker
explosions:
  text: explosions[]
  def: Explosion explosions[MAX_EXPLOSIONS];
  desc: Contains a fixed amount of space for all of the explosion entities defined on the current map.
  ref: /topics/global-variables-and-constants/#explosions
fontTileData:
  text: fontTileData
  def: byte *fontTileData;
  desc: Points to a 4,000 byte block of memory used to hold masked tile image data for the UI font.
  ref: /topics/global-variables-and-constants/#fontTileData
fountains:
  text: fountains[]
  def: Fountain fountains[MAX_FOUNTAINS];
  desc: Contains a fixed amount of space for all of the fountain entities defined on the current map.
  ref: /topics/global-variables-and-constants/#fountains
fullscreenImageNames:
  text: fullscreenImageNames[]
  def: |-
    char *fullscreenImageNames[] = {
        "PRETITLE.MNI", TITLE_SCREEN, "CREDIT.MNI", "BONUS.MNI", END_SCREEN,
        "ONEMOMNT.MNI"
    };
  desc: Holds a list of all group file entry names that refer to full-screen image data.
  ref: /topics/global-variables-and-constants/#fullscreenImageNames
gameScore:
  text: gameScore
  def: dword gameScore;
  desc: Holds the number of points that the player has earned over the course of the current game.
  ref: /topics/global-variables-and-constants/#gameScore
gameStars:
  text: gameStars
  def: dword gameStars;
  desc: Holds the number of stars that the player has collected.
  ref: /topics/global-variables-and-constants/#gameStars
gameTickCount:
  text: gameTickCount
  def: word gameTickCount;
  desc: Holds a running counter that increments precisely 140 times per second, regardless of the state of program execution.
  ref: /topics/global-variables-and-constants/#gameTickCount
hasHScrollBackdrop:
  text: hasHScrollBackdrop
  def: bool hasHScrollBackdrop;
  desc: When true, indicates that the current map has a backdrop that should scroll horizontally as the player moves through the game world.
  ref: /topics/global-variables-and-constants/#hasHScrollBackdrop
hasLightSwitch:
  text: hasLightSwitch
  def: bool hasLightSwitch;
  desc: When true, indicates that the current map has a switch that can control the lights.
  ref: /topics/global-variables-and-constants/#hasLightSwitch
hasRain:
  text: hasRain
  def: bool hasRain;
  desc: When true, indicates that the current map should spawn random raindrops in uncovered areas.
  ref: /topics/global-variables-and-constants/#hasRain
hasVScrollBackdrop:
  text: hasVScrollBackdrop
  def: bool hasVScrollBackdrop;
  desc: When true, indicates that the current map has a backdrop that should scroll vertically as the player moves through the game world.
  ref: /topics/global-variables-and-constants/#hasVScrollBackdrop
highScoreNames:
  text: highScoreNames[]
  def: |-
    typedef char HighScoreName[16];
    HighScoreName highScoreNames[11];
  desc: Points to the first element of an 11-element fixed-length string array. Each element is 16 bytes long, and holds one of the names on the high score table.
  ref: /topics/global-variables-and-constants/#highScoreNames
highScoreValues:
  text: highScoreValues[]
  def: dword highScoreValues[11];
  desc: Points to the first element of an 11-element numeric array. Each element is a doubleword value, and holds one of the scores on the high score table.
  ref: /topics/global-variables-and-constants/#highScoreValues
isAdLibPresent:
  text: isAdLibPresent
  def: bbool isAdLibPresent;
  desc: Holds a true value if an AdLib card was detected in the system, and false otherwise.
  ref: /topics/global-variables-and-constants/#isAdLibPresent
isAdLibPresentPrivate:
  text: isAdLibPresentPrivate
  def: bool isAdLibPresentPrivate;
  desc: Holds a true value if an AdLib card was detected in the system, and false otherwise.
  ref: /topics/global-variables-and-constants/#isAdLibPresentPrivate
isAdLibServiceRunning:
  text: isAdLibServiceRunning
  def: bool isAdLibServiceRunning;
  desc: Holds a true value if the system timer is running at the faster AdLib rate and the AdLib service is being called. Otherwise, holds false to indicate that the timer is running slowly and only the PC speaker service is being called.
  ref: /topics/global-variables-and-constants/#isAdLibServiceRunning
isAdLibStarted:
  text: isAdLibStarted
  def: bool isAdLibStarted;
  desc: Holds a true value if the AdLib startup code has executed, and false if the AdLib has either never been started or was explicitly stopped.
  ref: /topics/global-variables-and-constants/#isAdLibStarted
isCartoonDataLoaded:
  text: isCartoonDataLoaded
  def: bbool isCartoonDataLoaded;
  desc: Holds a true value if the cartoon tile image data has been loaded into the shared memory. When false, this memory is either uninitialized or contains map data.
  ref: /topics/global-variables-and-constants/#isCartoonDataLoaded
isDebugMode:
  text: isDebugMode
  def: bbool isDebugMode;
  desc: Holds a true value if the debug mode has been activated by the player, and false during normal gameplay.
  ref: /topics/global-variables-and-constants/#isDebugMode
isGodMode:
  text: isGodMode
  def: bool isGodMode;
  desc: Holds a true value if the god mode has been activated by using the debug keys, and false during normal gameplay.
  ref: /topics/global-variables-and-constants/#isGodMode
isInGame:
  text: isInGame
  def: bbool isInGame;
  desc: Holds a true value if a game is currently being played, and false if the main menu is being shown.
  ref: /topics/global-variables-and-constants/#isInGame
isJoystickReady:
  text: isJoystickReady
  def: bool isJoystickReady;
  desc: Controls whether game input should come from the keyboard or the joystick.
  ref: /topics/global-variables-and-constants/#isJoystickReady
isKeyDown:
  text: isKeyDown[]
  def: bbool isKeyDown[255];
  desc: Holds the down/up state of each keyboard key. Elements are indexed by the key's "make" code, and each element holds a true value if the key is down and false if it is up.
  ref: /topics/global-variables-and-constants/#isKeyDown
isMusicEnabled:
  text: isMusicEnabled
  def: bool isMusicEnabled;
  desc: Controls whether or not the AdLib music should be sent to the hardware.
  ref: /topics/global-variables-and-constants/#isMusicEnabled
isNewGame:
  text: isNewGame
  def: bbool isNewGame;
  desc: Holds a true value if the game loop was started via the "Begin New Game" menu option, and false in all other cases (load game or demo mode).
  ref: /topics/global-variables-and-constants/#isNewGame
isNewSound:
  text: isNewSound
  def: bool isNewSound;
  desc: Indicates that the currently-playing PC speaker sound effect has been changed.
  ref: /topics/global-variables-and-constants/#isNewSound
isPlayerInPipe:
  text: isPlayerInPipe
  def: bbool isPlayerInPipe;
  desc: Holds a true value if the player is currently inside the pipe system and false during normal gameplay.
  ref: /topics/global-variables-and-constants/#isPlayerInPipe
isPlayerInvincible:
  text: isPlayerInvincible
  def: bbool isPlayerInvincible;
  desc: When true, makes the player immune to all actors that would normally cause damage. Does not protect from falling off the bottom of the map.
  ref: /topics/global-variables-and-constants/#isPlayerInvincible
isPlayerNearHintGlobe:
  text: isPlayerNearHintGlobe
  def: bool isPlayerNearHintGlobe;
  desc: Holds a true value if the player is currently near any hint globe actor, and false otherwise.
  ref: /topics/global-variables-and-constants/#isPlayerNearHintGlobe
isPlayerNearTransporter:
  text: isPlayerNearTransporter
  def: bool isPlayerNearTransporter;
  desc: Holds a true value if the player is currently near any transporter actor, and false otherwise.
  ref: /topics/global-variables-and-constants/#isPlayerNearTransporter
isPlayerPushAbortable:
  text: isPlayerPushAbortable
  def: bbool isPlayerPushAbortable;
  desc: Holds a true value if the currently active push can be ended early by issuing a jump command.
  ref: /topics/global-variables-and-constants/#isPlayerPushAbortable
isPlayerPushBlockable:
  text: isPlayerPushBlockable
  def: bool isPlayerPushBlockable;
  desc: Holds a true value if the currently active push should stop if a map tile is encountered that blocks movement in the pushed direction.
  ref: /topics/global-variables-and-constants/#isPlayerPushBlockable
isPlayerPushed:
  text: isPlayerPushed
  def: bool isPlayerPushed;
  desc: Holds a true value if the player is currently immobilized in a "pushed" state, moving in a fixed direction without considering user input.
  ref: /topics/global-variables-and-constants/#isPlayerPushed
isPlayerSlidingEast:
  text: isPlayerSlidingEast
  def: bool isPlayerSlidingEast;
  desc: Holds a true value if the player is standing on a surface that is both slippery and sloped down toward the eastern direction.
  ref: /topics/global-variables-and-constants/#isPlayerSlidingEast
isPlayerSlidingWest:
  text: isPlayerSlidingWest
  def: bool isPlayerSlidingWest;
  desc: Holds a true value if the player is standing on a surface that is both slippery and sloped down toward the western direction.
  ref: /topics/global-variables-and-constants/#isPlayerSlidingWest
isPounceReady:
  text: isPounceReady
  def: bool isPounceReady;
  desc: Holds a true value if the player's horizontal and vertical pounce position are correct relative to the position of the last actor tested by {{< lookup/cref InteractPlayer >}}.
  ref: /topics/global-variables-and-constants/#isPounceReady
isSoundEnabled:
  text: isSoundEnabled
  def: bool isSoundEnabled;
  desc: Controls whether or not the PC speaker sound effects should be sent to the hardware.
  ref: /topics/global-variables-and-constants/#isSoundEnabled
joystickBandBottom:
  text: joystickBandBottom[]
  def: int joystickBandBottom[3];
  desc: Holds the timer values for the bottom edge of each joystick's dead zone. Index 0 is unused; index 1 and 2 are for joystick 1 and 2, respectively.
  ref: /topics/global-variables-and-constants/#joystickBandBottom
joystickBandLeft:
  text: joystickBandLeft[]
  def: int joystickBandLeft[3];
  desc: Holds the timer values for the left edge of each joystick's dead zone. Index 0 is unused; index 1 and 2 are for joystick 1 and 2, respectively.
  ref: /topics/global-variables-and-constants/#joystickBandLeft
joystickBandRight:
  text: joystickBandRight[]
  def: int joystickBandRight[3];
  desc: Holds the timer values for the right edge of each joystick's dead zone. Index 0 is unused; index 1 and 2 are for joystick 1 and 2, respectively.
  ref: /topics/global-variables-and-constants/#joystickBandRight
joystickBandTop:
  text: joystickBandTop[]
  def: int joystickBandTop[3];
  desc: Holds the timer values for the top edge of each joystick's dead zone. Index 0 is unused; index 1 and 2 are for joystick 1 and 2, respectively.
  ref: /topics/global-variables-and-constants/#joystickBandTop
joystickBtn1Bombs:
  text: joystickBtn1Bombs
  def: bool joystickBtn1Bombs;
  desc: Controls which action the primary joystick button performs. When true, this button places a bomb. When false, this button makes the player jump. In either case, the secondary button takes the opposite action.
  ref: /topics/global-variables-and-constants/#joystickBtn1Bombs
keyNames:
  text: keyNames[]
  def: |-
    typedef char KeyName[6];
    KeyName keyNames[] = {
        "NULL", "ESC", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-",
        "=", "BKSP", "TAB", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P",
        " ", " ", "ENTR", "CTRL", "A", "S", "D", "F", "G", "H", "J", "K", "L",
        ";", "\"", " ", "LSHFT", " ", "Z", "X", "C", "V", "B", "N", "M", ",",
        ".", "?", "RSHFT", "PRTSC", "ALT", "SPACE", "CAPLK", "F1", "F2", "F3",
        "F4", "F5", "F6", "F7", "F8", "F9", "F10", "NUMLK", "SCRLK", "HOME",
        "\x18", "PGUP", "-", "\x1B", "5", "\x1C", "+", "END", "\x19", "PGDN",
        "INS", "DEL", "SYSRQ", "", "", "F11", "F12", ""
    };
  desc: Defines short (5 character or less) key name strings for the most common scancodes on the 84-key IBM PC/AT keyboard.
  ref: /topics/global-variables-and-constants/#keyNames
lastGroupEntryLength:
  text: lastGroupEntryLength
  def: dword lastGroupEntryLength;
  desc: Holds the file size, in bytes, of the most recent group file entry that was opened.
  ref: /topics/global-variables-and-constants/#lastGroupEntryLength
lastScancode:
  text: lastScancode
  def: byte lastScancode;
  desc: Holds the most recent byte of data received by the system's keyboard controller.
  ref: /topics/global-variables-and-constants/#lastScancode
levelNum:
  text: levelNum
  def: word levelNum;
  desc: Holds the current level number being played.
  ref: /topics/global-variables-and-constants/#levelNum
lights:
  text: lights[]
  def: Light lights[MAX_LIGHTS];
  desc: Contains a fixed amount of space for all of the light actors defined on the current map.
  ref: /topics/global-variables-and-constants/#lights
mapData:
  text: mapData
  def: |-
    union {
        byte *b;
        word *w;
    } mapData;
  desc: Points to a 65,535 byte block of memory used to hold map data during the game OR temporary data in the main menu.
  ref: /topics/global-variables-and-constants/#mapData
mapNames:
  text: mapNames[]
  def: |-
    #define MAP_NAMES { \
        "A1.MNI",  "A2.MNI",  "bonus1.mni", "bonus2.mni", \
        "A3.mni",  "A4.mni",  "bonus1.mni", "bonus2.mni", \
        "A5.mni",  "A6.mni",  "bonus1.mni", "bonus2.mni", \
        "A7.mni",  "A8.mni",  "bonus1.mni", "bonus2.mni", \
        "A9.mni",  "A10.mni", "bonus1.mni", "bonus2.mni", \
        "A11.mni", "A12.mni", "bonus1.mni", "bonus2.mni", \
        "A13.mni", "A14.mni", "bonus1.mni", "bonus2.mni", \
        "A15.mni", "A16.mni" \
    }  /* episode 1, or */
    #define MAP_NAMES { \
        "B1.MNI",  "B2.MNI",  "bonus3.mni", "bonus4.mni", \
        "B3.mni",  "B4.mni",  "bonus3.mni", "bonus4.mni", \
        "B5.mni",  "B6.mni",  "bonus3.mni", "bonus4.mni", \
        "B7.mni",  "B8.mni",  "bonus3.mni", "bonus4.mni", \
        "B9.mni",  "B10.mni", "bonus3.mni", "bonus4.mni", \
        "B11.mni", "B12.mni", "bonus3.mni", "bonus4.mni", \
        "B13.mni", "B14.mni", "bonus3.mni", "bonus4.mni", \
        "B15.mni", "B16.mni" \
    }  /* episode 2, or */
    #define MAP_NAMES { \
        "C1.MNI",  "C2.MNI",  "bonus5.mni", "bonus6.mni", \
        "C3.mni",  "C4.mni",  "bonus5.mni", "bonus6.mni", \
        "C5.mni",  "C6.mni",  "bonus5.mni", "bonus6.mni", \
        "C7.mni",  "C8.mni",  "bonus5.mni", "bonus6.mni", \
        "C9.mni",  "C10.mni", "bonus5.mni", "bonus6.mni", \
        "C11.mni", "C12.mni", "bonus5.mni", "bonus6.mni", \
        "C13.mni", "C14.mni", "bonus5.mni", "bonus6.mni", \
        "C15.mni", "C16.mni" \
    }  /* episode 3 */
    char *mapNames[] = MAP_NAMES;
  desc: Defines a list of the map file names corresponding to each level number in the game. Each episode includes higher-numbered maps that do not exist and cannot be reached.
  ref: /topics/global-variables-and-constants/#mapNames
mapWidth:
  text: mapWidth
  def: word mapWidth;
  desc: Holds the width of the currently-loaded map, in tiles.
  ref: /topics/global-variables-and-constants/#mapWidth
mapYPower:
  text: mapYPower
  def: word mapYPower;
  desc: Holds the width of the currently-loaded map, in tiles, expressed as 2 to the Nth power.
  ref: /topics/global-variables-and-constants/#mapYPower
maskedTileData:
  text: maskedTileData
  def: byte *maskedTileData;
  desc: Points to a 40,000 byte block of memory used to hold masked tile image data during the game OR music data in the main menu.
  ref: /topics/global-variables-and-constants/#maskedTileData
maxScrollY:
  text: maxScrollY
  def: word maxScrollY;
  desc: Holds the largest allowable Y scroll position value for the current map.
  ref: /topics/global-variables-and-constants/#maxScrollY
miscData:
  text: miscData
  def: byte *miscData;
  desc: Points to a 35,000 byte block of memory used to hold a variety of different unrelated things.
  ref: /topics/global-variables-and-constants/#miscData
miscDataContents:
  text: miscDataContents
  def: word miscDataContents;
  desc: Provides an indication of the last data that was loaded into the miscellaneous data block.
  ref: /topics/global-variables-and-constants/#miscDataContents
musicDataHead:
  text: musicDataHead
  def: word *musicDataHead;
  desc: Holds the memory address of the first word of the current music data. Used to rewind the music playback pointer each time the music loops.
  ref: /topics/global-variables-and-constants/#musicDataHead
musicDataLeft:
  text: musicDataLeft
  def: word musicDataLeft;
  desc: Tracks the number of bytes of music data that still remain to be played. Once this value reaches zero, the music must restart from the beginning.
  ref: /topics/global-variables-and-constants/#musicDataLeft
musicDataLength:
  text: musicDataLength
  def: word musicDataLength;
  desc: Tracks the total length of the current music data, in bytes.
  ref: /topics/global-variables-and-constants/#musicDataLength
musicDataPtr:
  text: musicDataPtr
  def: word *musicDataPtr;
  desc: Points to the next word of music data that is going to be sent to the AdLib hardware.
  ref: /topics/global-variables-and-constants/#musicDataPtr
musicNames:
  text: musicNames[]
  def: |-
    char *musicNames[] = {
        "mcaves.mni", "mscarry.mni", "mboss.mni", "mrunaway.mni",
        "mcircus.mni", "mtekwrd.mni", "measylev.mni", "mrockit.mni",
        "mhappy.mni", "mdevo.mni", "mdadoda.mni", "mbells.mni", "mdrums.mni",
        "mbanjo.mni", "measy2.mni", "mteck2.mni", "mteck3.mni", "mteck4.mni",
        "mzztop.mni"
    };
  desc: Holds a list of all group file entry names that refer to music data.
  ref: /topics/global-variables-and-constants/#musicNames
musicNextDue:
  text: musicNextDue
  def: dword musicNextDue;
  desc: Tracks the timestamp, in music ticks, when the next chunk of music is scheduled to be sent to the AdLib hardware.
  ref: /topics/global-variables-and-constants/#musicNextDue
musicTickCount:
  text: musicTickCount
  def: dword musicTickCount;
  desc: Tracks the current timestamp, in music ticks. Increments each time the AdLib service runs.
  ref: /topics/global-variables-and-constants/#musicTickCount
mysteryWallTime:
  text: mysteryWallTime
  def: word mysteryWallTime;
  desc: Controls activation of each {{< lookup/actor 62 >}} on the current map.
  ref: /topics/global-variables-and-constants/#mysteryWallTime
nextActorIndex:
  text: nextActorIndex
  def: word nextActorIndex;
  desc: Used as a pass-by-global variable to communicate the actor array slot that should be filled during construction of one actor.
  ref: /topics/global-variables-and-constants/#nextActorIndex
nextDrawMode:
  text: nextDrawMode
  def: word nextDrawMode;
  desc: Used as a pass-by-global variable to communicate the display mode to be used when drawing the actively-processing actor's sprite.
  ref: /topics/global-variables-and-constants/#nextDrawMode
numActors:
  text: numActors
  def: word numActors;
  desc: Holds the current number of utilized elements in the actors array.
  ref: /topics/global-variables-and-constants/#numActors
numBarrels:
  text: numBarrels
  def: word numBarrels;
  desc: Holds the current number of barrel and basket actors (combined) that are alive on the map.
  ref: /topics/global-variables-and-constants/#numBarrels
numDecorations:
  text: numDecorations
  def: word numDecorations;
  desc: Holds the current number of elements in the decorations array, regardless of the number of elements in actual use.
  ref: /topics/global-variables-and-constants/#numDecorations
numExplosions:
  text: numExplosions
  def: word numExplosions;
  desc: Holds the current number of elements in the explosions array, regardless of the number of elements in actual use.
  ref: /topics/global-variables-and-constants/#numExplosions
numEyePlants:
  text: numEyePlants
  def: word numEyePlants;
  desc: Holds the current number of eye plant actors that are alive on the map.
  ref: /topics/global-variables-and-constants/#numEyePlants
numFountains:
  text: numFountains
  def: word numFountains;
  desc: Holds the current number of utilized elements in the fountains array.
  ref: /topics/global-variables-and-constants/#numFountains
numLights:
  text: numLights
  def: word numLights;
  desc: Holds the current number of utilized elements in the lights array.
  ref: /topics/global-variables-and-constants/#numLights
numPlatforms:
  text: numPlatforms
  def: word numPlatforms;
  desc: Holds the current number of utilized elements in the platforms array.
  ref: /topics/global-variables-and-constants/#numPlatforms
numShards:
  text: numShards
  def: word numShards;
  desc: Holds the current number of elements in the shards array, regardless of the number of elements in actual use.
  ref: /topics/global-variables-and-constants/#numShards
numSpawners:
  text: numSpawners
  def: word numSpawners;
  desc: Holds the current number of elements in the spawners array, regardless of the number of elements in actual use.
  ref: /topics/global-variables-and-constants/#numSpawners
paletteAnimationNum:
  text: paletteAnimationNum
  def: byte paletteAnimationNum;
  desc: Holds the current palette animation number that was specified by the map being played.
  ref: /topics/global-variables-and-constants/#paletteAnimationNum
paletteStepCount:
  text: paletteStepCount
  def: dword paletteStepCount;
  desc: Holds the current position within the palette animation table.
  ref: /topics/global-variables-and-constants/#paletteStepCount
pit0Value:
  text: pit0Value
  def: dword pit0Value;
  desc: Holds a copy of the most recent value used to reconfigure channel 0 of the system's Programmable Interval Timer.
  ref: /topics/global-variables-and-constants/#pit0Value
platforms:
  text: platforms[]
  def: Platform platforms[MAX_PLATFORMS];
  desc: Contains a fixed amount of space for all of the platform entities defined on the current map.
  ref: /topics/global-variables-and-constants/#platforms
playerBaseFrame:
  text: playerBaseFrame
  def: word playerBaseFrame;
  desc: Tracks the direction the player is currently facing, either east or west, as a base frame offset in the player sprite data.
  ref: /topics/global-variables-and-constants/#playerBaseFrame
playerBombs:
  text: playerBombs
  def: word playerBombs;
  desc: Holds the number of bombs the player is currently carrying.
  ref: /topics/global-variables-and-constants/#playerBombs
playerClingDir:
  text: playerClingDir
  def: byte playerClingDir;
  desc: Holds a direction value that tracks if the player is clinging to a wall, and which side that wall is on.
  ref: /topics/global-variables-and-constants/#playerClingDir
playerDeadTime:
  text: playerDeadTime
  def: word playerDeadTime;
  desc: Holds a zero while the player is alive, and an incrementing value greater than zero while the player is dead and progressing through the death animation.
  ref: /topics/global-variables-and-constants/#playerDeadTime
playerDizzyLeft:
  text: playerDizzyLeft
  def: word playerDizzyLeft;
  desc: When nonzero, indicates that the player is immobilized due to being dizzy from an extreme movement. This counter will decrement to zero, at which point the dizzy condition wears off and the player can move again.
  ref: /topics/global-variables-and-constants/#playerDizzyLeft
playerFaceDir:
  text: playerFaceDir
  def: word playerFaceDir;
  desc: Tracks the direction the player is currently facing, either east or west, as a direction value.
  ref: /topics/global-variables-and-constants/#playerFaceDir
playerFallDeadTime:
  text: playerFallDeadTime
  def: byte playerFallDeadTime;
  desc: Holds a zero while the player is alive, and an incrementing value greater than zero while the player has fallen off the bottom of the map and is progressing through the death animation.
  ref: /topics/global-variables-and-constants/#playerFallDeadTime
playerFrame:
  text: playerFrame
  def: word playerFrame;
  desc: Holds the current sprite frame that should be used to represent the player, disregarding east/west-facing variations.
  ref: /topics/global-variables-and-constants/#playerFrame
playerHealth:
  text: playerHealth
  def: word playerHealth;
  desc: Holds the current amount of health the player has. Zero represents the immediate death of the player.
  ref: /topics/global-variables-and-constants/#playerHealth
playerHealthCells:
  text: playerHealthCells
  def: word playerHealthCells;
  desc: Holds the number of health bar cells that are shown on the status bar. The player always has one unit of health more than the number of bar cells (i.e. the player is still alive if all the cells are unfilled).
  ref: /topics/global-variables-and-constants/#playerHealthCells
playerHurtCooldown:
  text: playerHurtCooldown
  def: word playerHurtCooldown;
  desc: When greater than zero, makes the player temporarily invincible and flashes the sprite. Decrements toward zero during every frame of gameplay.
  ref: /topics/global-variables-and-constants/#playerHurtCooldown
playerInfoData:
  text: playerInfoData
  def: word *playerInfoData;
  desc: Points to a block of memory containing tile info data (widths, heights, and offsets) for player sprites.
  ref: /topics/global-variables-and-constants/#playerInfoData
playerPushDir:
  text: playerPushDir
  def: word playerPushDir;
  desc: Specifies the direction in which the player should move during a "push" sequence.
  ref: /topics/global-variables-and-constants/#playerPushDir
playerPushForceFrame:
  text: playerPushForceFrame
  def: word playerPushForceFrame;
  desc: Specifies the frame of player sprite animation to show during a "push" sequence.
  ref: /topics/global-variables-and-constants/#playerPushForceFrame
playerPushMaxTime:
  text: playerPushMaxTime
  def: word playerPushMaxTime;
  desc: Holds the number of game ticks that need to elapse before the currently active "push" sequence completes. This duration (in terms of elapsed time) is unaffected by the speed of the push.
  ref: /topics/global-variables-and-constants/#playerPushMaxTime
playerPushSpeed:
  text: playerPushSpeed
  def: word playerPushSpeed;
  desc: Holds the configured speed, in tiles per game tick, of the currently active "push" sequence.
  ref: /topics/global-variables-and-constants/#playerPushSpeed
playerPushTime:
  text: playerPushTime
  def: word playerPushTime;
  desc: Holds the number of game ticks that have elapsed since the currently active "push" sequence was started.
  ref: /topics/global-variables-and-constants/#playerPushTime
playerTileData:
  text: playerTileData
  def: byte *playerTileData;
  desc: Points to a block of memory matching the size and content of the PLAYERS.MNI group file entry, nominally 30,000 bytes.
  ref: /topics/global-variables-and-constants/#playerTileData
playerX:
  text: playerX
  def: word playerX;
  desc: Represents the current horizontal position of the player within the map. The origin tile is on the left edge of the player's sprite.
  ref: /topics/global-variables-and-constants/#playerX
playerY:
  text: playerY
  def: word playerY;
  desc: Represents the current vertical position of the player within the map. The origin tile is on the bottom edge of the player's sprite.
  ref: /topics/global-variables-and-constants/#playerY
pounceHintState:
  text: pounceHintState
  def: word pounceHintState;
  desc: Holds a flag that tracks whether the user has been shown the "jump on top of creatures..." hint dialog.
  ref: /topics/global-variables-and-constants/#pounceHintState
pounceStreak:
  text: pounceStreak
  def: word pounceStreak;
  desc: Holds a counter that tracks the number of times the player has pounced on any enemy actor without touching the ground.
  ref: /topics/global-variables-and-constants/#pounceStreak
profCountCPU:
  text: profCountCPU
  def: word profCountCPU;
  desc: Used temporarily during CPU profiling to track the number of busy loop iterations the CPU has performed so far.
  ref: /topics/global-variables-and-constants/#profCountCPU
profCountPIT:
  text: profCountPIT
  def: word profCountPIT;
  desc: Used temporarily during CPU profiling to track the number of timer interrupts that have been raised by the Programmable Interval Timer so far.
  ref: /topics/global-variables-and-constants/#profCountPIT
queuePlayerDizzy:
  text: queuePlayerDizzy
  def: bool queuePlayerDizzy;
  desc: When true, indicates that a condition has been reached that will cause the player to become "dizzy" upon touching the ground -- that is, temporarily immobilized due to an extreme amount of movement.
  ref: /topics/global-variables-and-constants/#queuePlayerDizzy
randStepCount:
  text: randStepCount
  def: word randStepCount;
  desc: Holds an index value between 0 and 35 that is used by the game's pseudorandom number generator to produce deterministic random numbers for the game's actors.
  ref: /topics/global-variables-and-constants/#randStepCount
savedInt8:
  text: savedInt8
  def: |-
    typedef void interrupt (*InterruptFunction)(void);
    InterruptFunction savedInt8;
  desc: Holds a reference to the old interrupt service routine for interrupt vector 8.
  ref: /topics/global-variables-and-constants/#savedInt8
savedInt9:
  text: savedInt9
  def: |-
    typedef void interrupt (*InterruptFunction)(void);
    InterruptFunction savedInt9;
  desc: Holds a reference to the old interrupt service routine for interrupt vector 9.
  ref: /topics/global-variables-and-constants/#savedInt9
sawAutoHintGlobe:
  text: sawAutoHintGlobe
  def: bbool sawAutoHintGlobe;
  desc: Holds a true value once the user has touched a hint globe, resulting in auto-activation without needing to press the "look up" key. Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawAutoHintGlobe
sawBearTrapBubble:
  text: sawBearTrapBubble
  def: bool sawBearTrapBubble;
  desc: Holds a true value once the user has encountered a bear trap actor for the first time, resulting in an "UMPH!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawBearTrapBubble
sawBombHint:
  text: sawBombHint
  def: bool sawBombHint;
  desc: Holds a true value once the user has seen the hint dialog teaching them about finding and using bombs. Defaults to false when a new game is started.
  ref: /topics/global-variables-and-constants/#sawBombHint
sawBossBubble:
  text: sawBossBubble
  def: bool sawBossBubble;
  desc: Holds a true value once the user has encountered a boss actor for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawBossBubble
sawHamburgerBubble:
  text: sawHamburgerBubble
  def: bool sawHamburgerBubble;
  desc: Holds a true value once the user has picked up a hamburger for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawHamburgerBubble
sawHealthHint:
  text: sawHealthHint
  def: bool sawHealthHint;
  desc: Holds a true value once the user has seen the hint dialog teaching them about Power Up modules and their effect on player health. Defaults to false when a new game is started.
  ref: /topics/global-variables-and-constants/#sawHealthHint
sawHurtBubble:
  text: sawHurtBubble
  def: bool sawHurtBubble;
  desc: Holds a true value once the user has seen the "OUCH!" bubble that appears when they get hurt for the first time. Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawHurtBubble
sawJumpPadBubble:
  text: sawJumpPadBubble
  def: bool sawJumpPadBubble;
  desc: Holds a true value once the user has encountered a jump pad actor for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawJumpPadBubble
sawMonumentBubble:
  text: sawMonumentBubble
  def: bool sawMonumentBubble;
  desc: Holds a true value once the user has encountered a monument actor for the first time, resulting in an "UMPH!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawMonumentBubble
sawMysteryWallBubble:
  text: sawMysteryWallBubble
  def: bool sawMysteryWallBubble;
  desc: Holds a true value once the user has encountered the switch that activates the mystery wall for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawMysteryWallBubble
sawPipeBubble:
  text: sawPipeBubble
  def: bool sawPipeBubble;
  desc: Holds a true value once the user has exited the pipe system for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawPipeBubble
sawPusherRobotBubble:
  text: sawPusherRobotBubble
  def: bool sawPusherRobotBubble;
  desc: Holds a true value once the user has encountered a pusher robot actor for the first time, resulting in an "UMPH!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawPusherRobotBubble
sawScooterBubble:
  text: sawScooterBubble
  def: bool sawScooterBubble;
  desc: Holds a true value once the user has encountered a scooter actor for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawScooterBubble
sawTransporterBubble:
  text: sawTransporterBubble
  def: bool sawTransporterBubble;
  desc: Holds a true value once the user has exited a transporter for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawTransporterBubble
sawTulipLauncherBubble:
  text: sawTulipLauncherBubble
  def: bool sawTulipLauncherBubble;
  desc: Holds a true value once the user has been ejected by a tulip launcher actor for the first time, resulting in a "WHOA!" speech bubble Defaults to false each time a level is started.
  ref: /topics/global-variables-and-constants/#sawTulipLauncherBubble
scancodeBomb:
  text: scancodeBomb
  def: byte scancodeBomb;
  desc: Holds the keyboard scancode that the user has selected for the player's "bomb" action.
  ref: /topics/global-variables-and-constants/#scancodeBomb
scancodeEast:
  text: scancodeEast
  def: byte scancodeEast;
  desc: Holds the keyboard scancode that the user has selected for the player's "walk east" movement command.
  ref: /topics/global-variables-and-constants/#scancodeEast
scancodeJump:
  text: scancodeJump
  def: byte scancodeJump;
  desc: Holds the keyboard scancode that the user has selected for the player's "jump" movement command.
  ref: /topics/global-variables-and-constants/#scancodeJump
scancodeNorth:
  text: scancodeNorth
  def: byte scancodeNorth;
  desc: Holds the keyboard scancode that the user has selected for the player's "look north" action.
  ref: /topics/global-variables-and-constants/#scancodeNorth
scancodeSouth:
  text: scancodeSouth
  def: byte scancodeSouth;
  desc: Holds the keyboard scancode that the user has selected for the player's "look south" action.
  ref: /topics/global-variables-and-constants/#scancodeSouth
scancodeWest:
  text: scancodeWest
  def: byte scancodeWest;
  desc: Holds the keyboard scancode that the user has selected for the player's "walk west" movement command.
  ref: /topics/global-variables-and-constants/#scancodeWest
scooterMounted:
  text: scooterMounted
  def: word scooterMounted;
  desc: Holds a combination state flag/counter that tracks if the player is currently riding a scooter and for how long that has been the case.
  ref: /topics/global-variables-and-constants/#scooterMounted
scrollX:
  text: scrollX
  def: word scrollX;
  desc: Holds the X coordinate of the map column currently positioned at the leftmost edge of the screen.
  ref: /topics/global-variables-and-constants/#scrollX
scrollY:
  text: scrollY
  def: word scrollY;
  desc: Holds the Y coordinate of the map row currently positioned at the topmost edge of the screen.
  ref: /topics/global-variables-and-constants/#scrollY
shards:
  text: shards[]
  def: Shard shards[MAX_SHARDS];
  desc: Contains a fixed amount of space for all of the shard entities defined on the current map.
  ref: /topics/global-variables-and-constants/#shards
skipDetectAdLib:
  text: skipDetectAdLib
  def: bool skipDetectAdLib;
  desc: Always false; part of an unused piece of code that would allow AdLib detection to be skipped based on a command-line switch.
  ref: /topics/global-variables-and-constants/#skipDetectAdLib
soundData1:
  text: soundData1
  def: word *soundData1;
  desc: Points to a block of memory matching the size and content of the SOUNDS.MNI group file entry, nominally 3,332 bytes.
  ref: /topics/global-variables-and-constants/#soundData1
soundData2:
  text: soundData2
  def: word *soundData2;
  desc: Points to a block of memory matching the size and content of the SOUNDS2.MNI group file entry, nominally 3,876 bytes.
  ref: /topics/global-variables-and-constants/#soundData2
soundData3:
  text: soundData3
  def: word *soundData3;
  desc: Points to a block of memory matching the size and content of the SOUNDS3.MNI group file entry, nominally 4,020 bytes.
  ref: /topics/global-variables-and-constants/#soundData3
soundDataPtr:
  text: soundDataPtr[]
  def: word *soundDataPtr[80];
  desc: Zero-indexed array of 80 elements, although not all are used. Each element points to the first data word of a PC speaker sound effect. Unused elements are null pointers.
  ref: /topics/global-variables-and-constants/#soundDataPtr
soundPriority:
  text: soundPriority[]
  def: byte soundPriority[81];
  desc: One-indexed array of 81 elements, although not all are used. Each element holds the priority value of a PC speaker sound effect. Unused elements are zero.
  ref: /topics/global-variables-and-constants/#soundPriority
spawners:
  text: spawners[]
  def: Spawner spawners[MAX_SPAWNERS];
  desc: Contains a fixed amount of space for all of the spawner entities defined on the current map.
  ref: /topics/global-variables-and-constants/#spawners
starBonusRanks:
  text: starBonusRanks[]
  def: |-
    char *starBonusRanks[] = {
        "    Not Bad!    ", "    Way Cool    ", "     Groovy     ",
        "    Radical!    ", "     Insane     ", "     Gnarly     ",
        "   Outrageous   ", "   Incredible   ", "    Awesome!    ",
        "   Brilliant!   ", "    Profound    ", "    Towering    ",
        "Rocket Scientist"
    };
  desc: Contains a sequence of thirteen fixed-length ranks which are shown as the player earns more stars.
  ref: /topics/global-variables-and-constants/#starBonusRanks
stnGroupFilename:
  text: stnGroupFilename
  def: char *stnGroupFilename = FILENAME_BASE ".STN";
  desc: Holds the name of the STN group file; this is a value like COSMOx.STN.
  ref: /topics/global-variables-and-constants/#stnGroupFilename
tileAttributeData:
  text: tileAttributeData
  def: byte *tileAttributeData;
  desc: If an AdLib card is installed, points to a dedicated 7,000 byte block of memory. If an AdLib card is not installed, points to the address 5,000 bytes into {{< lookup/cref miscData >}}.
  ref: /topics/global-variables-and-constants/#tileAttributeData
timerTickCount:
  text: timerTickCount
  def: dword timerTickCount;
  desc: Holds a computed running tally of how many 1.1931818... MHz timer ticks have occurred so far. Its range is artificially limited to 16 bits.
  ref: /topics/global-variables-and-constants/#timerTickCount
totalMemFreeAfter:
  text: totalMemFreeAfter
  def: dword totalMemFreeAfter;
  desc: Captures the amount of free memory, in bytes, after all allocations have been completed.
  ref: /topics/global-variables-and-constants/#totalMemFreeAfter
totalMemFreeBefore:
  text: totalMemFreeBefore
  def: dword totalMemFreeBefore;
  desc: Captures the amount of free memory, in bytes, immediately after the program started running.
  ref: /topics/global-variables-and-constants/#totalMemFreeBefore
transporterTimeLeft:
  text: transporterTimeLeft
  def: word transporterTimeLeft;
  desc: Holds a zero value while the player is not using any transporter, and a nonzero decrementing counter while a transporter is in use.
  ref: /topics/global-variables-and-constants/#transporterTimeLeft
usedCheatCode:
  text: usedCheatCode
  def: bool usedCheatCode;
  desc: Holds a flag that indicates that the user has used the cheat code.
  ref: /topics/global-variables-and-constants/#usedCheatCode
volGroupFilename:
  text: volGroupFilename
  def: char *volGroupFilename = FILENAME_BASE ".VOL";
  desc: Holds the name of the VOL group file; this is a value like COSMOx.VOL.
  ref: /topics/global-variables-and-constants/#volGroupFilename
wallclock10us:
  text: wallclock10us
  def: word wallclock10us;
  desc: Holds the calculated number of busy loop iterations that must be performed by the system's CPU to produce a delay of 10 microseconds.
  ref: /topics/global-variables-and-constants/#wallclock10us
wallclock25us:
  text: wallclock25us
  def: word wallclock25us;
  desc: Holds the calculated number of busy loop iterations that must be performed by the system's CPU to produce a delay of 25 microseconds.
  ref: /topics/global-variables-and-constants/#wallclock25us
wallclock100us:
  text: wallclock100us
  def: word wallclock100us;
  desc: Holds the calculated number of busy loop iterations that must be performed by the system's CPU to produce a delay of 100 microseconds.
  ref: /topics/global-variables-and-constants/#wallclock100us
winGame:
  text: winGame
  def: bool winGame;
  desc: Indicates if the conditions have been met for the entire game to be "won," terminating the game loop and showing the ending story.
  ref: /topics/global-variables-and-constants/#winGame
winLevel:
  text: winLevel
  def: bool winLevel;
  desc: Indicates if the conditions have been met for the current level to be "won," allowing the player to advance to the next level in the progression.
  ref: /topics/global-variables-and-constants/#winLevel
writePath:
  text: writePath
  def: char *writePath;
  desc: Holds the value of the write path.
  ref: /topics/global-variables-and-constants/#writePath
yOffsetTable:
  text: yOffsetTable[]
  def: |-
    word yOffsetTable[] = {
        0, 320, 640, 960, 1280, 1600, 1920, 2240, 2560, 2880, 3200, 3520, 3840,
        4160, 4480, 4800, 5120, 5440, 5760, 6080, 6400, 6720, 7040, 7360, 7680
    };
  desc: Holds a list of the first 25 multiples of 320, used to translate a tile's Y coordinate on the screen to a video memory address offset.
  ref: /topics/global-variables-and-constants/#yOffsetTable
